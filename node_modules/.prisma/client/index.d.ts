
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export interface PrismaPromise<A> extends Promise<A> {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  username: string
  password: string
}

/**
 * Model Host
 * 
 */
export type Host = {
  id: number
  hostName: string
  password: string
}

/**
 * Model userPersonalData
 * 
 */
export type userPersonalData = {
  id: number
  cellNumber: string | null
  firstName: string
  lastName: string
  dateOfBirth: string | null
  email: string
  userId: number | null
}

/**
 * Model Role
 * 
 */
export type Role = {
  name: string
}

/**
 * Model hostAddress
 * 
 */
export type hostAddress = {
  id: number
  street: string
  number: string
  cep: string
  district: string
  city: string
  state: string
  hostId: number | null
}

/**
 * Model hostContact
 * 
 */
export type hostContact = {
  id: number
  insta: string | null
  face: string | null
  mobile: string | null
  phone: string
  email: string
}

/**
 * Model Review
 * 
 */
export type Review = {
  id: number
  userId: number
  hostId: number
  postDate: string
  rating: number
  text: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.host`: Exposes CRUD operations for the **Host** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hosts
    * const hosts = await prisma.host.findMany()
    * ```
    */
  get host(): Prisma.HostDelegate<GlobalReject>;

  /**
   * `prisma.userPersonalData`: Exposes CRUD operations for the **userPersonalData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPersonalData
    * const userPersonalData = await prisma.userPersonalData.findMany()
    * ```
    */
  get userPersonalData(): Prisma.userPersonalDataDelegate<GlobalReject>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<GlobalReject>;

  /**
   * `prisma.hostAddress`: Exposes CRUD operations for the **hostAddress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HostAddresses
    * const hostAddresses = await prisma.hostAddress.findMany()
    * ```
    */
  get hostAddress(): Prisma.hostAddressDelegate<GlobalReject>;

  /**
   * `prisma.hostContact`: Exposes CRUD operations for the **hostContact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HostContacts
    * const hostContacts = await prisma.hostContact.findMany()
    * ```
    */
  get hostContact(): Prisma.hostContactDelegate<GlobalReject>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.9.0
   * Query Engine version: ca7fcef713137fa11029d519a9780db130cca91d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Host: 'Host',
    userPersonalData: 'userPersonalData',
    Role: 'Role',
    hostAddress: 'hostAddress',
    hostContact: 'hostContact',
    Review: 'Review'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    roles: number
    reviews: number
  }

  export type UserCountOutputTypeSelect = {
    roles?: boolean
    reviews?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type HostCountOutputType
   */


  export type HostCountOutputType = {
    address: number
    contact: number
    roles: number
    reviews: number
  }

  export type HostCountOutputTypeSelect = {
    address?: boolean
    contact?: boolean
    roles?: boolean
    reviews?: boolean
  }

  export type HostCountOutputTypeGetPayload<S extends boolean | null | undefined | HostCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? HostCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (HostCountOutputTypeArgs)
    ? HostCountOutputType 
    : S extends { select: any } & (HostCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof HostCountOutputType ? HostCountOutputType[P] : never
  } 
      : HostCountOutputType




  // Custom InputTypes

  /**
   * HostCountOutputType without action
   */
  export type HostCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the HostCountOutputType
     */
    select?: HostCountOutputTypeSelect | null
  }



  /**
   * Count Type RoleCountOutputType
   */


  export type RoleCountOutputType = {
    users: number
    hosts: number
  }

  export type RoleCountOutputTypeSelect = {
    users?: boolean
    hosts?: boolean
  }

  export type RoleCountOutputTypeGetPayload<S extends boolean | null | undefined | RoleCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RoleCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (RoleCountOutputTypeArgs)
    ? RoleCountOutputType 
    : S extends { select: any } & (RoleCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof RoleCountOutputType ? RoleCountOutputType[P] : never
  } 
      : RoleCountOutputType




  // Custom InputTypes

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    username: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    username?: boolean
    password?: boolean
    personalData?: boolean | userPersonalDataArgs
    roles?: boolean | User$rolesArgs
    reviews?: boolean | User$reviewsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    personalData?: boolean | userPersonalDataArgs
    roles?: boolean | User$rolesArgs
    reviews?: boolean | User$reviewsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'personalData' ? userPersonalDataGetPayload<S['include'][P]> | null :
        P extends 'roles' ? Array < RoleGetPayload<S['include'][P]>>  :
        P extends 'reviews' ? Array < ReviewGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'personalData' ? userPersonalDataGetPayload<S['select'][P]> | null :
        P extends 'roles' ? Array < RoleGetPayload<S['select'][P]>>  :
        P extends 'reviews' ? Array < ReviewGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    personalData<T extends userPersonalDataArgs= {}>(args?: Subset<T, userPersonalDataArgs>): Prisma__userPersonalDataClient<userPersonalDataGetPayload<T> | Null>;

    roles<T extends User$rolesArgs= {}>(args?: Subset<T, User$rolesArgs>): PrismaPromise<Array<RoleGetPayload<T>>| Null>;

    reviews<T extends User$reviewsArgs= {}>(args?: Subset<T, User$reviewsArgs>): PrismaPromise<Array<ReviewGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.roles
   */
  export type User$rolesArgs = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude | null
    where?: RoleWhereInput
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    cursor?: RoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RoleScalarFieldEnum>
  }


  /**
   * User.reviews
   */
  export type User$reviewsArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    where?: ReviewWhereInput
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReviewScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Host
   */


  export type AggregateHost = {
    _count: HostCountAggregateOutputType | null
    _avg: HostAvgAggregateOutputType | null
    _sum: HostSumAggregateOutputType | null
    _min: HostMinAggregateOutputType | null
    _max: HostMaxAggregateOutputType | null
  }

  export type HostAvgAggregateOutputType = {
    id: number | null
  }

  export type HostSumAggregateOutputType = {
    id: number | null
  }

  export type HostMinAggregateOutputType = {
    id: number | null
    hostName: string | null
    password: string | null
  }

  export type HostMaxAggregateOutputType = {
    id: number | null
    hostName: string | null
    password: string | null
  }

  export type HostCountAggregateOutputType = {
    id: number
    hostName: number
    password: number
    _all: number
  }


  export type HostAvgAggregateInputType = {
    id?: true
  }

  export type HostSumAggregateInputType = {
    id?: true
  }

  export type HostMinAggregateInputType = {
    id?: true
    hostName?: true
    password?: true
  }

  export type HostMaxAggregateInputType = {
    id?: true
    hostName?: true
    password?: true
  }

  export type HostCountAggregateInputType = {
    id?: true
    hostName?: true
    password?: true
    _all?: true
  }

  export type HostAggregateArgs = {
    /**
     * Filter which Host to aggregate.
     */
    where?: HostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hosts to fetch.
     */
    orderBy?: Enumerable<HostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Hosts
    **/
    _count?: true | HostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HostMaxAggregateInputType
  }

  export type GetHostAggregateType<T extends HostAggregateArgs> = {
        [P in keyof T & keyof AggregateHost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHost[P]>
      : GetScalarType<T[P], AggregateHost[P]>
  }




  export type HostGroupByArgs = {
    where?: HostWhereInput
    orderBy?: Enumerable<HostOrderByWithAggregationInput>
    by: HostScalarFieldEnum[]
    having?: HostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HostCountAggregateInputType | true
    _avg?: HostAvgAggregateInputType
    _sum?: HostSumAggregateInputType
    _min?: HostMinAggregateInputType
    _max?: HostMaxAggregateInputType
  }


  export type HostGroupByOutputType = {
    id: number
    hostName: string
    password: string
    _count: HostCountAggregateOutputType | null
    _avg: HostAvgAggregateOutputType | null
    _sum: HostSumAggregateOutputType | null
    _min: HostMinAggregateOutputType | null
    _max: HostMaxAggregateOutputType | null
  }

  type GetHostGroupByPayload<T extends HostGroupByArgs> = PrismaPromise<
    Array<
      PickArray<HostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HostGroupByOutputType[P]>
            : GetScalarType<T[P], HostGroupByOutputType[P]>
        }
      >
    >


  export type HostSelect = {
    id?: boolean
    hostName?: boolean
    password?: boolean
    address?: boolean | Host$addressArgs
    contact?: boolean | Host$contactArgs
    roles?: boolean | Host$rolesArgs
    reviews?: boolean | Host$reviewsArgs
    _count?: boolean | HostCountOutputTypeArgs
  }


  export type HostInclude = {
    address?: boolean | Host$addressArgs
    contact?: boolean | Host$contactArgs
    roles?: boolean | Host$rolesArgs
    reviews?: boolean | Host$reviewsArgs
    _count?: boolean | HostCountOutputTypeArgs
  }

  export type HostGetPayload<S extends boolean | null | undefined | HostArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Host :
    S extends undefined ? never :
    S extends { include: any } & (HostArgs | HostFindManyArgs)
    ? Host  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'address' ? Array < hostAddressGetPayload<S['include'][P]>>  :
        P extends 'contact' ? Array < hostContactGetPayload<S['include'][P]>>  :
        P extends 'roles' ? Array < RoleGetPayload<S['include'][P]>>  :
        P extends 'reviews' ? Array < ReviewGetPayload<S['include'][P]>>  :
        P extends '_count' ? HostCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (HostArgs | HostFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'address' ? Array < hostAddressGetPayload<S['select'][P]>>  :
        P extends 'contact' ? Array < hostContactGetPayload<S['select'][P]>>  :
        P extends 'roles' ? Array < RoleGetPayload<S['select'][P]>>  :
        P extends 'reviews' ? Array < ReviewGetPayload<S['select'][P]>>  :
        P extends '_count' ? HostCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Host ? Host[P] : never
  } 
      : Host


  type HostCountArgs = 
    Omit<HostFindManyArgs, 'select' | 'include'> & {
      select?: HostCountAggregateInputType | true
    }

  export interface HostDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Host that matches the filter.
     * @param {HostFindUniqueArgs} args - Arguments to find a Host
     * @example
     * // Get one Host
     * const host = await prisma.host.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Host'> extends True ? Prisma__HostClient<HostGetPayload<T>> : Prisma__HostClient<HostGetPayload<T> | null, null>

    /**
     * Find one Host that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HostFindUniqueOrThrowArgs} args - Arguments to find a Host
     * @example
     * // Get one Host
     * const host = await prisma.host.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, HostFindUniqueOrThrowArgs>
    ): Prisma__HostClient<HostGetPayload<T>>

    /**
     * Find the first Host that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostFindFirstArgs} args - Arguments to find a Host
     * @example
     * // Get one Host
     * const host = await prisma.host.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Host'> extends True ? Prisma__HostClient<HostGetPayload<T>> : Prisma__HostClient<HostGetPayload<T> | null, null>

    /**
     * Find the first Host that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostFindFirstOrThrowArgs} args - Arguments to find a Host
     * @example
     * // Get one Host
     * const host = await prisma.host.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, HostFindFirstOrThrowArgs>
    ): Prisma__HostClient<HostGetPayload<T>>

    /**
     * Find zero or more Hosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hosts
     * const hosts = await prisma.host.findMany()
     * 
     * // Get first 10 Hosts
     * const hosts = await prisma.host.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hostWithIdOnly = await prisma.host.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HostFindManyArgs>(
      args?: SelectSubset<T, HostFindManyArgs>
    ): PrismaPromise<Array<HostGetPayload<T>>>

    /**
     * Create a Host.
     * @param {HostCreateArgs} args - Arguments to create a Host.
     * @example
     * // Create one Host
     * const Host = await prisma.host.create({
     *   data: {
     *     // ... data to create a Host
     *   }
     * })
     * 
    **/
    create<T extends HostCreateArgs>(
      args: SelectSubset<T, HostCreateArgs>
    ): Prisma__HostClient<HostGetPayload<T>>

    /**
     * Create many Hosts.
     *     @param {HostCreateManyArgs} args - Arguments to create many Hosts.
     *     @example
     *     // Create many Hosts
     *     const host = await prisma.host.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HostCreateManyArgs>(
      args?: SelectSubset<T, HostCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Host.
     * @param {HostDeleteArgs} args - Arguments to delete one Host.
     * @example
     * // Delete one Host
     * const Host = await prisma.host.delete({
     *   where: {
     *     // ... filter to delete one Host
     *   }
     * })
     * 
    **/
    delete<T extends HostDeleteArgs>(
      args: SelectSubset<T, HostDeleteArgs>
    ): Prisma__HostClient<HostGetPayload<T>>

    /**
     * Update one Host.
     * @param {HostUpdateArgs} args - Arguments to update one Host.
     * @example
     * // Update one Host
     * const host = await prisma.host.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HostUpdateArgs>(
      args: SelectSubset<T, HostUpdateArgs>
    ): Prisma__HostClient<HostGetPayload<T>>

    /**
     * Delete zero or more Hosts.
     * @param {HostDeleteManyArgs} args - Arguments to filter Hosts to delete.
     * @example
     * // Delete a few Hosts
     * const { count } = await prisma.host.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HostDeleteManyArgs>(
      args?: SelectSubset<T, HostDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hosts
     * const host = await prisma.host.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HostUpdateManyArgs>(
      args: SelectSubset<T, HostUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Host.
     * @param {HostUpsertArgs} args - Arguments to update or create a Host.
     * @example
     * // Update or create a Host
     * const host = await prisma.host.upsert({
     *   create: {
     *     // ... data to create a Host
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Host we want to update
     *   }
     * })
    **/
    upsert<T extends HostUpsertArgs>(
      args: SelectSubset<T, HostUpsertArgs>
    ): Prisma__HostClient<HostGetPayload<T>>

    /**
     * Count the number of Hosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostCountArgs} args - Arguments to filter Hosts to count.
     * @example
     * // Count the number of Hosts
     * const count = await prisma.host.count({
     *   where: {
     *     // ... the filter for the Hosts we want to count
     *   }
     * })
    **/
    count<T extends HostCountArgs>(
      args?: Subset<T, HostCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Host.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HostAggregateArgs>(args: Subset<T, HostAggregateArgs>): PrismaPromise<GetHostAggregateType<T>>

    /**
     * Group by Host.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HostGroupByArgs['orderBy'] }
        : { orderBy?: HostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHostGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Host.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HostClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    address<T extends Host$addressArgs= {}>(args?: Subset<T, Host$addressArgs>): PrismaPromise<Array<hostAddressGetPayload<T>>| Null>;

    contact<T extends Host$contactArgs= {}>(args?: Subset<T, Host$contactArgs>): PrismaPromise<Array<hostContactGetPayload<T>>| Null>;

    roles<T extends Host$rolesArgs= {}>(args?: Subset<T, Host$rolesArgs>): PrismaPromise<Array<RoleGetPayload<T>>| Null>;

    reviews<T extends Host$reviewsArgs= {}>(args?: Subset<T, Host$reviewsArgs>): PrismaPromise<Array<ReviewGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Host base type for findUnique actions
   */
  export type HostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Host
     */
    select?: HostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HostInclude | null
    /**
     * Filter, which Host to fetch.
     */
    where: HostWhereUniqueInput
  }

  /**
   * Host findUnique
   */
  export interface HostFindUniqueArgs extends HostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Host findUniqueOrThrow
   */
  export type HostFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Host
     */
    select?: HostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HostInclude | null
    /**
     * Filter, which Host to fetch.
     */
    where: HostWhereUniqueInput
  }


  /**
   * Host base type for findFirst actions
   */
  export type HostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Host
     */
    select?: HostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HostInclude | null
    /**
     * Filter, which Host to fetch.
     */
    where?: HostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hosts to fetch.
     */
    orderBy?: Enumerable<HostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hosts.
     */
    cursor?: HostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hosts.
     */
    distinct?: Enumerable<HostScalarFieldEnum>
  }

  /**
   * Host findFirst
   */
  export interface HostFindFirstArgs extends HostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Host findFirstOrThrow
   */
  export type HostFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Host
     */
    select?: HostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HostInclude | null
    /**
     * Filter, which Host to fetch.
     */
    where?: HostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hosts to fetch.
     */
    orderBy?: Enumerable<HostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hosts.
     */
    cursor?: HostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hosts.
     */
    distinct?: Enumerable<HostScalarFieldEnum>
  }


  /**
   * Host findMany
   */
  export type HostFindManyArgs = {
    /**
     * Select specific fields to fetch from the Host
     */
    select?: HostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HostInclude | null
    /**
     * Filter, which Hosts to fetch.
     */
    where?: HostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hosts to fetch.
     */
    orderBy?: Enumerable<HostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Hosts.
     */
    cursor?: HostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hosts.
     */
    skip?: number
    distinct?: Enumerable<HostScalarFieldEnum>
  }


  /**
   * Host create
   */
  export type HostCreateArgs = {
    /**
     * Select specific fields to fetch from the Host
     */
    select?: HostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HostInclude | null
    /**
     * The data needed to create a Host.
     */
    data: XOR<HostCreateInput, HostUncheckedCreateInput>
  }


  /**
   * Host createMany
   */
  export type HostCreateManyArgs = {
    /**
     * The data used to create many Hosts.
     */
    data: Enumerable<HostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Host update
   */
  export type HostUpdateArgs = {
    /**
     * Select specific fields to fetch from the Host
     */
    select?: HostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HostInclude | null
    /**
     * The data needed to update a Host.
     */
    data: XOR<HostUpdateInput, HostUncheckedUpdateInput>
    /**
     * Choose, which Host to update.
     */
    where: HostWhereUniqueInput
  }


  /**
   * Host updateMany
   */
  export type HostUpdateManyArgs = {
    /**
     * The data used to update Hosts.
     */
    data: XOR<HostUpdateManyMutationInput, HostUncheckedUpdateManyInput>
    /**
     * Filter which Hosts to update
     */
    where?: HostWhereInput
  }


  /**
   * Host upsert
   */
  export type HostUpsertArgs = {
    /**
     * Select specific fields to fetch from the Host
     */
    select?: HostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HostInclude | null
    /**
     * The filter to search for the Host to update in case it exists.
     */
    where: HostWhereUniqueInput
    /**
     * In case the Host found by the `where` argument doesn't exist, create a new Host with this data.
     */
    create: XOR<HostCreateInput, HostUncheckedCreateInput>
    /**
     * In case the Host was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HostUpdateInput, HostUncheckedUpdateInput>
  }


  /**
   * Host delete
   */
  export type HostDeleteArgs = {
    /**
     * Select specific fields to fetch from the Host
     */
    select?: HostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HostInclude | null
    /**
     * Filter which Host to delete.
     */
    where: HostWhereUniqueInput
  }


  /**
   * Host deleteMany
   */
  export type HostDeleteManyArgs = {
    /**
     * Filter which Hosts to delete
     */
    where?: HostWhereInput
  }


  /**
   * Host.address
   */
  export type Host$addressArgs = {
    /**
     * Select specific fields to fetch from the hostAddress
     */
    select?: hostAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostAddressInclude | null
    where?: hostAddressWhereInput
    orderBy?: Enumerable<hostAddressOrderByWithRelationInput>
    cursor?: hostAddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HostAddressScalarFieldEnum>
  }


  /**
   * Host.contact
   */
  export type Host$contactArgs = {
    /**
     * Select specific fields to fetch from the hostContact
     */
    select?: hostContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostContactInclude | null
    where?: hostContactWhereInput
    orderBy?: Enumerable<hostContactOrderByWithRelationInput>
    cursor?: hostContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HostContactScalarFieldEnum>
  }


  /**
   * Host.roles
   */
  export type Host$rolesArgs = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude | null
    where?: RoleWhereInput
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    cursor?: RoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RoleScalarFieldEnum>
  }


  /**
   * Host.reviews
   */
  export type Host$reviewsArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    where?: ReviewWhereInput
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReviewScalarFieldEnum>
  }


  /**
   * Host without action
   */
  export type HostArgs = {
    /**
     * Select specific fields to fetch from the Host
     */
    select?: HostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HostInclude | null
  }



  /**
   * Model userPersonalData
   */


  export type AggregateUserPersonalData = {
    _count: UserPersonalDataCountAggregateOutputType | null
    _avg: UserPersonalDataAvgAggregateOutputType | null
    _sum: UserPersonalDataSumAggregateOutputType | null
    _min: UserPersonalDataMinAggregateOutputType | null
    _max: UserPersonalDataMaxAggregateOutputType | null
  }

  export type UserPersonalDataAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserPersonalDataSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserPersonalDataMinAggregateOutputType = {
    id: number | null
    cellNumber: string | null
    firstName: string | null
    lastName: string | null
    dateOfBirth: string | null
    email: string | null
    userId: number | null
  }

  export type UserPersonalDataMaxAggregateOutputType = {
    id: number | null
    cellNumber: string | null
    firstName: string | null
    lastName: string | null
    dateOfBirth: string | null
    email: string | null
    userId: number | null
  }

  export type UserPersonalDataCountAggregateOutputType = {
    id: number
    cellNumber: number
    firstName: number
    lastName: number
    dateOfBirth: number
    email: number
    userId: number
    _all: number
  }


  export type UserPersonalDataAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserPersonalDataSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserPersonalDataMinAggregateInputType = {
    id?: true
    cellNumber?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    email?: true
    userId?: true
  }

  export type UserPersonalDataMaxAggregateInputType = {
    id?: true
    cellNumber?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    email?: true
    userId?: true
  }

  export type UserPersonalDataCountAggregateInputType = {
    id?: true
    cellNumber?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    email?: true
    userId?: true
    _all?: true
  }

  export type UserPersonalDataAggregateArgs = {
    /**
     * Filter which userPersonalData to aggregate.
     */
    where?: userPersonalDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userPersonalData to fetch.
     */
    orderBy?: Enumerable<userPersonalDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userPersonalDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userPersonalData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userPersonalData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userPersonalData
    **/
    _count?: true | UserPersonalDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserPersonalDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserPersonalDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPersonalDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPersonalDataMaxAggregateInputType
  }

  export type GetUserPersonalDataAggregateType<T extends UserPersonalDataAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPersonalData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPersonalData[P]>
      : GetScalarType<T[P], AggregateUserPersonalData[P]>
  }




  export type UserPersonalDataGroupByArgs = {
    where?: userPersonalDataWhereInput
    orderBy?: Enumerable<userPersonalDataOrderByWithAggregationInput>
    by: UserPersonalDataScalarFieldEnum[]
    having?: userPersonalDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPersonalDataCountAggregateInputType | true
    _avg?: UserPersonalDataAvgAggregateInputType
    _sum?: UserPersonalDataSumAggregateInputType
    _min?: UserPersonalDataMinAggregateInputType
    _max?: UserPersonalDataMaxAggregateInputType
  }


  export type UserPersonalDataGroupByOutputType = {
    id: number
    cellNumber: string | null
    firstName: string
    lastName: string
    dateOfBirth: string | null
    email: string
    userId: number | null
    _count: UserPersonalDataCountAggregateOutputType | null
    _avg: UserPersonalDataAvgAggregateOutputType | null
    _sum: UserPersonalDataSumAggregateOutputType | null
    _min: UserPersonalDataMinAggregateOutputType | null
    _max: UserPersonalDataMaxAggregateOutputType | null
  }

  type GetUserPersonalDataGroupByPayload<T extends UserPersonalDataGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserPersonalDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPersonalDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPersonalDataGroupByOutputType[P]>
            : GetScalarType<T[P], UserPersonalDataGroupByOutputType[P]>
        }
      >
    >


  export type userPersonalDataSelect = {
    id?: boolean
    cellNumber?: boolean
    firstName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    email?: boolean
    user?: boolean | UserArgs
    userId?: boolean
  }


  export type userPersonalDataInclude = {
    user?: boolean | UserArgs
  }

  export type userPersonalDataGetPayload<S extends boolean | null | undefined | userPersonalDataArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? userPersonalData :
    S extends undefined ? never :
    S extends { include: any } & (userPersonalDataArgs | userPersonalDataFindManyArgs)
    ? userPersonalData  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (userPersonalDataArgs | userPersonalDataFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof userPersonalData ? userPersonalData[P] : never
  } 
      : userPersonalData


  type userPersonalDataCountArgs = 
    Omit<userPersonalDataFindManyArgs, 'select' | 'include'> & {
      select?: UserPersonalDataCountAggregateInputType | true
    }

  export interface userPersonalDataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one UserPersonalData that matches the filter.
     * @param {userPersonalDataFindUniqueArgs} args - Arguments to find a UserPersonalData
     * @example
     * // Get one UserPersonalData
     * const userPersonalData = await prisma.userPersonalData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userPersonalDataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userPersonalDataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'userPersonalData'> extends True ? Prisma__userPersonalDataClient<userPersonalDataGetPayload<T>> : Prisma__userPersonalDataClient<userPersonalDataGetPayload<T> | null, null>

    /**
     * Find one UserPersonalData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userPersonalDataFindUniqueOrThrowArgs} args - Arguments to find a UserPersonalData
     * @example
     * // Get one UserPersonalData
     * const userPersonalData = await prisma.userPersonalData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userPersonalDataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, userPersonalDataFindUniqueOrThrowArgs>
    ): Prisma__userPersonalDataClient<userPersonalDataGetPayload<T>>

    /**
     * Find the first UserPersonalData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userPersonalDataFindFirstArgs} args - Arguments to find a UserPersonalData
     * @example
     * // Get one UserPersonalData
     * const userPersonalData = await prisma.userPersonalData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userPersonalDataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userPersonalDataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'userPersonalData'> extends True ? Prisma__userPersonalDataClient<userPersonalDataGetPayload<T>> : Prisma__userPersonalDataClient<userPersonalDataGetPayload<T> | null, null>

    /**
     * Find the first UserPersonalData that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userPersonalDataFindFirstOrThrowArgs} args - Arguments to find a UserPersonalData
     * @example
     * // Get one UserPersonalData
     * const userPersonalData = await prisma.userPersonalData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userPersonalDataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, userPersonalDataFindFirstOrThrowArgs>
    ): Prisma__userPersonalDataClient<userPersonalDataGetPayload<T>>

    /**
     * Find zero or more UserPersonalData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userPersonalDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPersonalData
     * const userPersonalData = await prisma.userPersonalData.findMany()
     * 
     * // Get first 10 UserPersonalData
     * const userPersonalData = await prisma.userPersonalData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPersonalDataWithIdOnly = await prisma.userPersonalData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userPersonalDataFindManyArgs>(
      args?: SelectSubset<T, userPersonalDataFindManyArgs>
    ): PrismaPromise<Array<userPersonalDataGetPayload<T>>>

    /**
     * Create a UserPersonalData.
     * @param {userPersonalDataCreateArgs} args - Arguments to create a UserPersonalData.
     * @example
     * // Create one UserPersonalData
     * const UserPersonalData = await prisma.userPersonalData.create({
     *   data: {
     *     // ... data to create a UserPersonalData
     *   }
     * })
     * 
    **/
    create<T extends userPersonalDataCreateArgs>(
      args: SelectSubset<T, userPersonalDataCreateArgs>
    ): Prisma__userPersonalDataClient<userPersonalDataGetPayload<T>>

    /**
     * Create many UserPersonalData.
     *     @param {userPersonalDataCreateManyArgs} args - Arguments to create many UserPersonalData.
     *     @example
     *     // Create many UserPersonalData
     *     const userPersonalData = await prisma.userPersonalData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userPersonalDataCreateManyArgs>(
      args?: SelectSubset<T, userPersonalDataCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserPersonalData.
     * @param {userPersonalDataDeleteArgs} args - Arguments to delete one UserPersonalData.
     * @example
     * // Delete one UserPersonalData
     * const UserPersonalData = await prisma.userPersonalData.delete({
     *   where: {
     *     // ... filter to delete one UserPersonalData
     *   }
     * })
     * 
    **/
    delete<T extends userPersonalDataDeleteArgs>(
      args: SelectSubset<T, userPersonalDataDeleteArgs>
    ): Prisma__userPersonalDataClient<userPersonalDataGetPayload<T>>

    /**
     * Update one UserPersonalData.
     * @param {userPersonalDataUpdateArgs} args - Arguments to update one UserPersonalData.
     * @example
     * // Update one UserPersonalData
     * const userPersonalData = await prisma.userPersonalData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userPersonalDataUpdateArgs>(
      args: SelectSubset<T, userPersonalDataUpdateArgs>
    ): Prisma__userPersonalDataClient<userPersonalDataGetPayload<T>>

    /**
     * Delete zero or more UserPersonalData.
     * @param {userPersonalDataDeleteManyArgs} args - Arguments to filter UserPersonalData to delete.
     * @example
     * // Delete a few UserPersonalData
     * const { count } = await prisma.userPersonalData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userPersonalDataDeleteManyArgs>(
      args?: SelectSubset<T, userPersonalDataDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPersonalData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userPersonalDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPersonalData
     * const userPersonalData = await prisma.userPersonalData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userPersonalDataUpdateManyArgs>(
      args: SelectSubset<T, userPersonalDataUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPersonalData.
     * @param {userPersonalDataUpsertArgs} args - Arguments to update or create a UserPersonalData.
     * @example
     * // Update or create a UserPersonalData
     * const userPersonalData = await prisma.userPersonalData.upsert({
     *   create: {
     *     // ... data to create a UserPersonalData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPersonalData we want to update
     *   }
     * })
    **/
    upsert<T extends userPersonalDataUpsertArgs>(
      args: SelectSubset<T, userPersonalDataUpsertArgs>
    ): Prisma__userPersonalDataClient<userPersonalDataGetPayload<T>>

    /**
     * Count the number of UserPersonalData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userPersonalDataCountArgs} args - Arguments to filter UserPersonalData to count.
     * @example
     * // Count the number of UserPersonalData
     * const count = await prisma.userPersonalData.count({
     *   where: {
     *     // ... the filter for the UserPersonalData we want to count
     *   }
     * })
    **/
    count<T extends userPersonalDataCountArgs>(
      args?: Subset<T, userPersonalDataCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPersonalDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPersonalData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPersonalDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPersonalDataAggregateArgs>(args: Subset<T, UserPersonalDataAggregateArgs>): PrismaPromise<GetUserPersonalDataAggregateType<T>>

    /**
     * Group by UserPersonalData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPersonalDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPersonalDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPersonalDataGroupByArgs['orderBy'] }
        : { orderBy?: UserPersonalDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPersonalDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPersonalDataGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for userPersonalData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userPersonalDataClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * userPersonalData base type for findUnique actions
   */
  export type userPersonalDataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the userPersonalData
     */
    select?: userPersonalDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userPersonalDataInclude | null
    /**
     * Filter, which userPersonalData to fetch.
     */
    where: userPersonalDataWhereUniqueInput
  }

  /**
   * userPersonalData findUnique
   */
  export interface userPersonalDataFindUniqueArgs extends userPersonalDataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * userPersonalData findUniqueOrThrow
   */
  export type userPersonalDataFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the userPersonalData
     */
    select?: userPersonalDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userPersonalDataInclude | null
    /**
     * Filter, which userPersonalData to fetch.
     */
    where: userPersonalDataWhereUniqueInput
  }


  /**
   * userPersonalData base type for findFirst actions
   */
  export type userPersonalDataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the userPersonalData
     */
    select?: userPersonalDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userPersonalDataInclude | null
    /**
     * Filter, which userPersonalData to fetch.
     */
    where?: userPersonalDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userPersonalData to fetch.
     */
    orderBy?: Enumerable<userPersonalDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userPersonalData.
     */
    cursor?: userPersonalDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userPersonalData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userPersonalData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userPersonalData.
     */
    distinct?: Enumerable<UserPersonalDataScalarFieldEnum>
  }

  /**
   * userPersonalData findFirst
   */
  export interface userPersonalDataFindFirstArgs extends userPersonalDataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * userPersonalData findFirstOrThrow
   */
  export type userPersonalDataFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the userPersonalData
     */
    select?: userPersonalDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userPersonalDataInclude | null
    /**
     * Filter, which userPersonalData to fetch.
     */
    where?: userPersonalDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userPersonalData to fetch.
     */
    orderBy?: Enumerable<userPersonalDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userPersonalData.
     */
    cursor?: userPersonalDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userPersonalData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userPersonalData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userPersonalData.
     */
    distinct?: Enumerable<UserPersonalDataScalarFieldEnum>
  }


  /**
   * userPersonalData findMany
   */
  export type userPersonalDataFindManyArgs = {
    /**
     * Select specific fields to fetch from the userPersonalData
     */
    select?: userPersonalDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userPersonalDataInclude | null
    /**
     * Filter, which userPersonalData to fetch.
     */
    where?: userPersonalDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userPersonalData to fetch.
     */
    orderBy?: Enumerable<userPersonalDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userPersonalData.
     */
    cursor?: userPersonalDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userPersonalData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userPersonalData.
     */
    skip?: number
    distinct?: Enumerable<UserPersonalDataScalarFieldEnum>
  }


  /**
   * userPersonalData create
   */
  export type userPersonalDataCreateArgs = {
    /**
     * Select specific fields to fetch from the userPersonalData
     */
    select?: userPersonalDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userPersonalDataInclude | null
    /**
     * The data needed to create a userPersonalData.
     */
    data: XOR<userPersonalDataCreateInput, userPersonalDataUncheckedCreateInput>
  }


  /**
   * userPersonalData createMany
   */
  export type userPersonalDataCreateManyArgs = {
    /**
     * The data used to create many userPersonalData.
     */
    data: Enumerable<userPersonalDataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * userPersonalData update
   */
  export type userPersonalDataUpdateArgs = {
    /**
     * Select specific fields to fetch from the userPersonalData
     */
    select?: userPersonalDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userPersonalDataInclude | null
    /**
     * The data needed to update a userPersonalData.
     */
    data: XOR<userPersonalDataUpdateInput, userPersonalDataUncheckedUpdateInput>
    /**
     * Choose, which userPersonalData to update.
     */
    where: userPersonalDataWhereUniqueInput
  }


  /**
   * userPersonalData updateMany
   */
  export type userPersonalDataUpdateManyArgs = {
    /**
     * The data used to update userPersonalData.
     */
    data: XOR<userPersonalDataUpdateManyMutationInput, userPersonalDataUncheckedUpdateManyInput>
    /**
     * Filter which userPersonalData to update
     */
    where?: userPersonalDataWhereInput
  }


  /**
   * userPersonalData upsert
   */
  export type userPersonalDataUpsertArgs = {
    /**
     * Select specific fields to fetch from the userPersonalData
     */
    select?: userPersonalDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userPersonalDataInclude | null
    /**
     * The filter to search for the userPersonalData to update in case it exists.
     */
    where: userPersonalDataWhereUniqueInput
    /**
     * In case the userPersonalData found by the `where` argument doesn't exist, create a new userPersonalData with this data.
     */
    create: XOR<userPersonalDataCreateInput, userPersonalDataUncheckedCreateInput>
    /**
     * In case the userPersonalData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userPersonalDataUpdateInput, userPersonalDataUncheckedUpdateInput>
  }


  /**
   * userPersonalData delete
   */
  export type userPersonalDataDeleteArgs = {
    /**
     * Select specific fields to fetch from the userPersonalData
     */
    select?: userPersonalDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userPersonalDataInclude | null
    /**
     * Filter which userPersonalData to delete.
     */
    where: userPersonalDataWhereUniqueInput
  }


  /**
   * userPersonalData deleteMany
   */
  export type userPersonalDataDeleteManyArgs = {
    /**
     * Filter which userPersonalData to delete
     */
    where?: userPersonalDataWhereInput
  }


  /**
   * userPersonalData without action
   */
  export type userPersonalDataArgs = {
    /**
     * Select specific fields to fetch from the userPersonalData
     */
    select?: userPersonalDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userPersonalDataInclude | null
  }



  /**
   * Model Role
   */


  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    name: string | null
  }

  export type RoleMaxAggregateOutputType = {
    name: string | null
  }

  export type RoleCountAggregateOutputType = {
    name: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    name?: true
  }

  export type RoleMaxAggregateInputType = {
    name?: true
  }

  export type RoleCountAggregateInputType = {
    name?: true
    _all?: true
  }

  export type RoleAggregateArgs = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs = {
    where?: RoleWhereInput
    orderBy?: Enumerable<RoleOrderByWithAggregationInput>
    by: RoleScalarFieldEnum[]
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }


  export type RoleGroupByOutputType = {
    name: string
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect = {
    name?: boolean
    users?: boolean | Role$usersArgs
    hosts?: boolean | Role$hostsArgs
    _count?: boolean | RoleCountOutputTypeArgs
  }


  export type RoleInclude = {
    users?: boolean | Role$usersArgs
    hosts?: boolean | Role$hostsArgs
    _count?: boolean | RoleCountOutputTypeArgs
  }

  export type RoleGetPayload<S extends boolean | null | undefined | RoleArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Role :
    S extends undefined ? never :
    S extends { include: any } & (RoleArgs | RoleFindManyArgs)
    ? Role  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'users' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'hosts' ? Array < HostGetPayload<S['include'][P]>>  :
        P extends '_count' ? RoleCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RoleArgs | RoleFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'users' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'hosts' ? Array < HostGetPayload<S['select'][P]>>  :
        P extends '_count' ? RoleCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Role ? Role[P] : never
  } 
      : Role


  type RoleCountArgs = 
    Omit<RoleFindManyArgs, 'select' | 'include'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RoleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Role'> extends True ? Prisma__RoleClient<RoleGetPayload<T>> : Prisma__RoleClient<RoleGetPayload<T> | null, null>

    /**
     * Find one Role that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RoleFindUniqueOrThrowArgs>
    ): Prisma__RoleClient<RoleGetPayload<T>>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RoleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Role'> extends True ? Prisma__RoleClient<RoleGetPayload<T>> : Prisma__RoleClient<RoleGetPayload<T> | null, null>

    /**
     * Find the first Role that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RoleFindFirstOrThrowArgs>
    ): Prisma__RoleClient<RoleGetPayload<T>>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const roleWithNameOnly = await prisma.role.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends RoleFindManyArgs>(
      args?: SelectSubset<T, RoleFindManyArgs>
    ): PrismaPromise<Array<RoleGetPayload<T>>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends RoleCreateArgs>(
      args: SelectSubset<T, RoleCreateArgs>
    ): Prisma__RoleClient<RoleGetPayload<T>>

    /**
     * Create many Roles.
     *     @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const role = await prisma.role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoleCreateManyArgs>(
      args?: SelectSubset<T, RoleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends RoleDeleteArgs>(
      args: SelectSubset<T, RoleDeleteArgs>
    ): Prisma__RoleClient<RoleGetPayload<T>>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoleUpdateArgs>(
      args: SelectSubset<T, RoleUpdateArgs>
    ): Prisma__RoleClient<RoleGetPayload<T>>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoleDeleteManyArgs>(
      args?: SelectSubset<T, RoleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoleUpdateManyArgs>(
      args: SelectSubset<T, RoleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends RoleUpsertArgs>(
      args: SelectSubset<T, RoleUpsertArgs>
    ): Prisma__RoleClient<RoleGetPayload<T>>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RoleClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends Role$usersArgs= {}>(args?: Subset<T, Role$usersArgs>): PrismaPromise<Array<UserGetPayload<T>>| Null>;

    hosts<T extends Role$hostsArgs= {}>(args?: Subset<T, Role$hostsArgs>): PrismaPromise<Array<HostGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Role base type for findUnique actions
   */
  export type RoleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUnique
   */
  export interface RoleFindUniqueArgs extends RoleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role base type for findFirst actions
   */
  export type RoleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: Enumerable<RoleScalarFieldEnum>
  }

  /**
   * Role findFirst
   */
  export interface RoleFindFirstArgs extends RoleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: Enumerable<RoleScalarFieldEnum>
  }


  /**
   * Role findMany
   */
  export type RoleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: Enumerable<RoleScalarFieldEnum>
  }


  /**
   * Role create
   */
  export type RoleCreateArgs = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }


  /**
   * Role createMany
   */
  export type RoleCreateManyArgs = {
    /**
     * The data used to create many Roles.
     */
    data: Enumerable<RoleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Role update
   */
  export type RoleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }


  /**
   * Role upsert
   */
  export type RoleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }


  /**
   * Role delete
   */
  export type RoleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }


  /**
   * Role.users
   */
  export type Role$usersArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * Role.hosts
   */
  export type Role$hostsArgs = {
    /**
     * Select specific fields to fetch from the Host
     */
    select?: HostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HostInclude | null
    where?: HostWhereInput
    orderBy?: Enumerable<HostOrderByWithRelationInput>
    cursor?: HostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HostScalarFieldEnum>
  }


  /**
   * Role without action
   */
  export type RoleArgs = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude | null
  }



  /**
   * Model hostAddress
   */


  export type AggregateHostAddress = {
    _count: HostAddressCountAggregateOutputType | null
    _avg: HostAddressAvgAggregateOutputType | null
    _sum: HostAddressSumAggregateOutputType | null
    _min: HostAddressMinAggregateOutputType | null
    _max: HostAddressMaxAggregateOutputType | null
  }

  export type HostAddressAvgAggregateOutputType = {
    id: number | null
    hostId: number | null
  }

  export type HostAddressSumAggregateOutputType = {
    id: number | null
    hostId: number | null
  }

  export type HostAddressMinAggregateOutputType = {
    id: number | null
    street: string | null
    number: string | null
    cep: string | null
    district: string | null
    city: string | null
    state: string | null
    hostId: number | null
  }

  export type HostAddressMaxAggregateOutputType = {
    id: number | null
    street: string | null
    number: string | null
    cep: string | null
    district: string | null
    city: string | null
    state: string | null
    hostId: number | null
  }

  export type HostAddressCountAggregateOutputType = {
    id: number
    street: number
    number: number
    cep: number
    district: number
    city: number
    state: number
    hostId: number
    _all: number
  }


  export type HostAddressAvgAggregateInputType = {
    id?: true
    hostId?: true
  }

  export type HostAddressSumAggregateInputType = {
    id?: true
    hostId?: true
  }

  export type HostAddressMinAggregateInputType = {
    id?: true
    street?: true
    number?: true
    cep?: true
    district?: true
    city?: true
    state?: true
    hostId?: true
  }

  export type HostAddressMaxAggregateInputType = {
    id?: true
    street?: true
    number?: true
    cep?: true
    district?: true
    city?: true
    state?: true
    hostId?: true
  }

  export type HostAddressCountAggregateInputType = {
    id?: true
    street?: true
    number?: true
    cep?: true
    district?: true
    city?: true
    state?: true
    hostId?: true
    _all?: true
  }

  export type HostAddressAggregateArgs = {
    /**
     * Filter which hostAddress to aggregate.
     */
    where?: hostAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hostAddresses to fetch.
     */
    orderBy?: Enumerable<hostAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: hostAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hostAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hostAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned hostAddresses
    **/
    _count?: true | HostAddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HostAddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HostAddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HostAddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HostAddressMaxAggregateInputType
  }

  export type GetHostAddressAggregateType<T extends HostAddressAggregateArgs> = {
        [P in keyof T & keyof AggregateHostAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHostAddress[P]>
      : GetScalarType<T[P], AggregateHostAddress[P]>
  }




  export type HostAddressGroupByArgs = {
    where?: hostAddressWhereInput
    orderBy?: Enumerable<hostAddressOrderByWithAggregationInput>
    by: HostAddressScalarFieldEnum[]
    having?: hostAddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HostAddressCountAggregateInputType | true
    _avg?: HostAddressAvgAggregateInputType
    _sum?: HostAddressSumAggregateInputType
    _min?: HostAddressMinAggregateInputType
    _max?: HostAddressMaxAggregateInputType
  }


  export type HostAddressGroupByOutputType = {
    id: number
    street: string
    number: string
    cep: string
    district: string
    city: string
    state: string
    hostId: number | null
    _count: HostAddressCountAggregateOutputType | null
    _avg: HostAddressAvgAggregateOutputType | null
    _sum: HostAddressSumAggregateOutputType | null
    _min: HostAddressMinAggregateOutputType | null
    _max: HostAddressMaxAggregateOutputType | null
  }

  type GetHostAddressGroupByPayload<T extends HostAddressGroupByArgs> = PrismaPromise<
    Array<
      PickArray<HostAddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HostAddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HostAddressGroupByOutputType[P]>
            : GetScalarType<T[P], HostAddressGroupByOutputType[P]>
        }
      >
    >


  export type hostAddressSelect = {
    id?: boolean
    street?: boolean
    number?: boolean
    cep?: boolean
    district?: boolean
    city?: boolean
    state?: boolean
    host?: boolean | HostArgs
    hostId?: boolean
  }


  export type hostAddressInclude = {
    host?: boolean | HostArgs
  }

  export type hostAddressGetPayload<S extends boolean | null | undefined | hostAddressArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? hostAddress :
    S extends undefined ? never :
    S extends { include: any } & (hostAddressArgs | hostAddressFindManyArgs)
    ? hostAddress  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'host' ? HostGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (hostAddressArgs | hostAddressFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'host' ? HostGetPayload<S['select'][P]> | null :  P extends keyof hostAddress ? hostAddress[P] : never
  } 
      : hostAddress


  type hostAddressCountArgs = 
    Omit<hostAddressFindManyArgs, 'select' | 'include'> & {
      select?: HostAddressCountAggregateInputType | true
    }

  export interface hostAddressDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one HostAddress that matches the filter.
     * @param {hostAddressFindUniqueArgs} args - Arguments to find a HostAddress
     * @example
     * // Get one HostAddress
     * const hostAddress = await prisma.hostAddress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends hostAddressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, hostAddressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'hostAddress'> extends True ? Prisma__hostAddressClient<hostAddressGetPayload<T>> : Prisma__hostAddressClient<hostAddressGetPayload<T> | null, null>

    /**
     * Find one HostAddress that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {hostAddressFindUniqueOrThrowArgs} args - Arguments to find a HostAddress
     * @example
     * // Get one HostAddress
     * const hostAddress = await prisma.hostAddress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends hostAddressFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, hostAddressFindUniqueOrThrowArgs>
    ): Prisma__hostAddressClient<hostAddressGetPayload<T>>

    /**
     * Find the first HostAddress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hostAddressFindFirstArgs} args - Arguments to find a HostAddress
     * @example
     * // Get one HostAddress
     * const hostAddress = await prisma.hostAddress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends hostAddressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, hostAddressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'hostAddress'> extends True ? Prisma__hostAddressClient<hostAddressGetPayload<T>> : Prisma__hostAddressClient<hostAddressGetPayload<T> | null, null>

    /**
     * Find the first HostAddress that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hostAddressFindFirstOrThrowArgs} args - Arguments to find a HostAddress
     * @example
     * // Get one HostAddress
     * const hostAddress = await prisma.hostAddress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends hostAddressFindFirstOrThrowArgs>(
      args?: SelectSubset<T, hostAddressFindFirstOrThrowArgs>
    ): Prisma__hostAddressClient<hostAddressGetPayload<T>>

    /**
     * Find zero or more HostAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hostAddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HostAddresses
     * const hostAddresses = await prisma.hostAddress.findMany()
     * 
     * // Get first 10 HostAddresses
     * const hostAddresses = await prisma.hostAddress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hostAddressWithIdOnly = await prisma.hostAddress.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends hostAddressFindManyArgs>(
      args?: SelectSubset<T, hostAddressFindManyArgs>
    ): PrismaPromise<Array<hostAddressGetPayload<T>>>

    /**
     * Create a HostAddress.
     * @param {hostAddressCreateArgs} args - Arguments to create a HostAddress.
     * @example
     * // Create one HostAddress
     * const HostAddress = await prisma.hostAddress.create({
     *   data: {
     *     // ... data to create a HostAddress
     *   }
     * })
     * 
    **/
    create<T extends hostAddressCreateArgs>(
      args: SelectSubset<T, hostAddressCreateArgs>
    ): Prisma__hostAddressClient<hostAddressGetPayload<T>>

    /**
     * Create many HostAddresses.
     *     @param {hostAddressCreateManyArgs} args - Arguments to create many HostAddresses.
     *     @example
     *     // Create many HostAddresses
     *     const hostAddress = await prisma.hostAddress.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends hostAddressCreateManyArgs>(
      args?: SelectSubset<T, hostAddressCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a HostAddress.
     * @param {hostAddressDeleteArgs} args - Arguments to delete one HostAddress.
     * @example
     * // Delete one HostAddress
     * const HostAddress = await prisma.hostAddress.delete({
     *   where: {
     *     // ... filter to delete one HostAddress
     *   }
     * })
     * 
    **/
    delete<T extends hostAddressDeleteArgs>(
      args: SelectSubset<T, hostAddressDeleteArgs>
    ): Prisma__hostAddressClient<hostAddressGetPayload<T>>

    /**
     * Update one HostAddress.
     * @param {hostAddressUpdateArgs} args - Arguments to update one HostAddress.
     * @example
     * // Update one HostAddress
     * const hostAddress = await prisma.hostAddress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends hostAddressUpdateArgs>(
      args: SelectSubset<T, hostAddressUpdateArgs>
    ): Prisma__hostAddressClient<hostAddressGetPayload<T>>

    /**
     * Delete zero or more HostAddresses.
     * @param {hostAddressDeleteManyArgs} args - Arguments to filter HostAddresses to delete.
     * @example
     * // Delete a few HostAddresses
     * const { count } = await prisma.hostAddress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends hostAddressDeleteManyArgs>(
      args?: SelectSubset<T, hostAddressDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hostAddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HostAddresses
     * const hostAddress = await prisma.hostAddress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends hostAddressUpdateManyArgs>(
      args: SelectSubset<T, hostAddressUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one HostAddress.
     * @param {hostAddressUpsertArgs} args - Arguments to update or create a HostAddress.
     * @example
     * // Update or create a HostAddress
     * const hostAddress = await prisma.hostAddress.upsert({
     *   create: {
     *     // ... data to create a HostAddress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HostAddress we want to update
     *   }
     * })
    **/
    upsert<T extends hostAddressUpsertArgs>(
      args: SelectSubset<T, hostAddressUpsertArgs>
    ): Prisma__hostAddressClient<hostAddressGetPayload<T>>

    /**
     * Count the number of HostAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hostAddressCountArgs} args - Arguments to filter HostAddresses to count.
     * @example
     * // Count the number of HostAddresses
     * const count = await prisma.hostAddress.count({
     *   where: {
     *     // ... the filter for the HostAddresses we want to count
     *   }
     * })
    **/
    count<T extends hostAddressCountArgs>(
      args?: Subset<T, hostAddressCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HostAddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HostAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HostAddressAggregateArgs>(args: Subset<T, HostAddressAggregateArgs>): PrismaPromise<GetHostAddressAggregateType<T>>

    /**
     * Group by HostAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostAddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HostAddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HostAddressGroupByArgs['orderBy'] }
        : { orderBy?: HostAddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HostAddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHostAddressGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for hostAddress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__hostAddressClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    host<T extends HostArgs= {}>(args?: Subset<T, HostArgs>): Prisma__HostClient<HostGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * hostAddress base type for findUnique actions
   */
  export type hostAddressFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the hostAddress
     */
    select?: hostAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostAddressInclude | null
    /**
     * Filter, which hostAddress to fetch.
     */
    where: hostAddressWhereUniqueInput
  }

  /**
   * hostAddress findUnique
   */
  export interface hostAddressFindUniqueArgs extends hostAddressFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * hostAddress findUniqueOrThrow
   */
  export type hostAddressFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the hostAddress
     */
    select?: hostAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostAddressInclude | null
    /**
     * Filter, which hostAddress to fetch.
     */
    where: hostAddressWhereUniqueInput
  }


  /**
   * hostAddress base type for findFirst actions
   */
  export type hostAddressFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the hostAddress
     */
    select?: hostAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostAddressInclude | null
    /**
     * Filter, which hostAddress to fetch.
     */
    where?: hostAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hostAddresses to fetch.
     */
    orderBy?: Enumerable<hostAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hostAddresses.
     */
    cursor?: hostAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hostAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hostAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hostAddresses.
     */
    distinct?: Enumerable<HostAddressScalarFieldEnum>
  }

  /**
   * hostAddress findFirst
   */
  export interface hostAddressFindFirstArgs extends hostAddressFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * hostAddress findFirstOrThrow
   */
  export type hostAddressFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the hostAddress
     */
    select?: hostAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostAddressInclude | null
    /**
     * Filter, which hostAddress to fetch.
     */
    where?: hostAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hostAddresses to fetch.
     */
    orderBy?: Enumerable<hostAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hostAddresses.
     */
    cursor?: hostAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hostAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hostAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hostAddresses.
     */
    distinct?: Enumerable<HostAddressScalarFieldEnum>
  }


  /**
   * hostAddress findMany
   */
  export type hostAddressFindManyArgs = {
    /**
     * Select specific fields to fetch from the hostAddress
     */
    select?: hostAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostAddressInclude | null
    /**
     * Filter, which hostAddresses to fetch.
     */
    where?: hostAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hostAddresses to fetch.
     */
    orderBy?: Enumerable<hostAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing hostAddresses.
     */
    cursor?: hostAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hostAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hostAddresses.
     */
    skip?: number
    distinct?: Enumerable<HostAddressScalarFieldEnum>
  }


  /**
   * hostAddress create
   */
  export type hostAddressCreateArgs = {
    /**
     * Select specific fields to fetch from the hostAddress
     */
    select?: hostAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostAddressInclude | null
    /**
     * The data needed to create a hostAddress.
     */
    data: XOR<hostAddressCreateInput, hostAddressUncheckedCreateInput>
  }


  /**
   * hostAddress createMany
   */
  export type hostAddressCreateManyArgs = {
    /**
     * The data used to create many hostAddresses.
     */
    data: Enumerable<hostAddressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * hostAddress update
   */
  export type hostAddressUpdateArgs = {
    /**
     * Select specific fields to fetch from the hostAddress
     */
    select?: hostAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostAddressInclude | null
    /**
     * The data needed to update a hostAddress.
     */
    data: XOR<hostAddressUpdateInput, hostAddressUncheckedUpdateInput>
    /**
     * Choose, which hostAddress to update.
     */
    where: hostAddressWhereUniqueInput
  }


  /**
   * hostAddress updateMany
   */
  export type hostAddressUpdateManyArgs = {
    /**
     * The data used to update hostAddresses.
     */
    data: XOR<hostAddressUpdateManyMutationInput, hostAddressUncheckedUpdateManyInput>
    /**
     * Filter which hostAddresses to update
     */
    where?: hostAddressWhereInput
  }


  /**
   * hostAddress upsert
   */
  export type hostAddressUpsertArgs = {
    /**
     * Select specific fields to fetch from the hostAddress
     */
    select?: hostAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostAddressInclude | null
    /**
     * The filter to search for the hostAddress to update in case it exists.
     */
    where: hostAddressWhereUniqueInput
    /**
     * In case the hostAddress found by the `where` argument doesn't exist, create a new hostAddress with this data.
     */
    create: XOR<hostAddressCreateInput, hostAddressUncheckedCreateInput>
    /**
     * In case the hostAddress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<hostAddressUpdateInput, hostAddressUncheckedUpdateInput>
  }


  /**
   * hostAddress delete
   */
  export type hostAddressDeleteArgs = {
    /**
     * Select specific fields to fetch from the hostAddress
     */
    select?: hostAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostAddressInclude | null
    /**
     * Filter which hostAddress to delete.
     */
    where: hostAddressWhereUniqueInput
  }


  /**
   * hostAddress deleteMany
   */
  export type hostAddressDeleteManyArgs = {
    /**
     * Filter which hostAddresses to delete
     */
    where?: hostAddressWhereInput
  }


  /**
   * hostAddress without action
   */
  export type hostAddressArgs = {
    /**
     * Select specific fields to fetch from the hostAddress
     */
    select?: hostAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostAddressInclude | null
  }



  /**
   * Model hostContact
   */


  export type AggregateHostContact = {
    _count: HostContactCountAggregateOutputType | null
    _avg: HostContactAvgAggregateOutputType | null
    _sum: HostContactSumAggregateOutputType | null
    _min: HostContactMinAggregateOutputType | null
    _max: HostContactMaxAggregateOutputType | null
  }

  export type HostContactAvgAggregateOutputType = {
    id: number | null
  }

  export type HostContactSumAggregateOutputType = {
    id: number | null
  }

  export type HostContactMinAggregateOutputType = {
    id: number | null
    insta: string | null
    face: string | null
    mobile: string | null
    phone: string | null
    email: string | null
  }

  export type HostContactMaxAggregateOutputType = {
    id: number | null
    insta: string | null
    face: string | null
    mobile: string | null
    phone: string | null
    email: string | null
  }

  export type HostContactCountAggregateOutputType = {
    id: number
    insta: number
    face: number
    mobile: number
    phone: number
    email: number
    _all: number
  }


  export type HostContactAvgAggregateInputType = {
    id?: true
  }

  export type HostContactSumAggregateInputType = {
    id?: true
  }

  export type HostContactMinAggregateInputType = {
    id?: true
    insta?: true
    face?: true
    mobile?: true
    phone?: true
    email?: true
  }

  export type HostContactMaxAggregateInputType = {
    id?: true
    insta?: true
    face?: true
    mobile?: true
    phone?: true
    email?: true
  }

  export type HostContactCountAggregateInputType = {
    id?: true
    insta?: true
    face?: true
    mobile?: true
    phone?: true
    email?: true
    _all?: true
  }

  export type HostContactAggregateArgs = {
    /**
     * Filter which hostContact to aggregate.
     */
    where?: hostContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hostContacts to fetch.
     */
    orderBy?: Enumerable<hostContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: hostContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hostContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hostContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned hostContacts
    **/
    _count?: true | HostContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HostContactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HostContactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HostContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HostContactMaxAggregateInputType
  }

  export type GetHostContactAggregateType<T extends HostContactAggregateArgs> = {
        [P in keyof T & keyof AggregateHostContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHostContact[P]>
      : GetScalarType<T[P], AggregateHostContact[P]>
  }




  export type HostContactGroupByArgs = {
    where?: hostContactWhereInput
    orderBy?: Enumerable<hostContactOrderByWithAggregationInput>
    by: HostContactScalarFieldEnum[]
    having?: hostContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HostContactCountAggregateInputType | true
    _avg?: HostContactAvgAggregateInputType
    _sum?: HostContactSumAggregateInputType
    _min?: HostContactMinAggregateInputType
    _max?: HostContactMaxAggregateInputType
  }


  export type HostContactGroupByOutputType = {
    id: number
    insta: string | null
    face: string | null
    mobile: string | null
    phone: string
    email: string
    _count: HostContactCountAggregateOutputType | null
    _avg: HostContactAvgAggregateOutputType | null
    _sum: HostContactSumAggregateOutputType | null
    _min: HostContactMinAggregateOutputType | null
    _max: HostContactMaxAggregateOutputType | null
  }

  type GetHostContactGroupByPayload<T extends HostContactGroupByArgs> = PrismaPromise<
    Array<
      PickArray<HostContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HostContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HostContactGroupByOutputType[P]>
            : GetScalarType<T[P], HostContactGroupByOutputType[P]>
        }
      >
    >


  export type hostContactSelect = {
    id?: boolean
    insta?: boolean
    face?: boolean
    mobile?: boolean
    phone?: boolean
    email?: boolean
    host?: boolean | HostArgs
  }


  export type hostContactInclude = {
    host?: boolean | HostArgs
  }

  export type hostContactGetPayload<S extends boolean | null | undefined | hostContactArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? hostContact :
    S extends undefined ? never :
    S extends { include: any } & (hostContactArgs | hostContactFindManyArgs)
    ? hostContact  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'host' ? HostGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (hostContactArgs | hostContactFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'host' ? HostGetPayload<S['select'][P]> | null :  P extends keyof hostContact ? hostContact[P] : never
  } 
      : hostContact


  type hostContactCountArgs = 
    Omit<hostContactFindManyArgs, 'select' | 'include'> & {
      select?: HostContactCountAggregateInputType | true
    }

  export interface hostContactDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one HostContact that matches the filter.
     * @param {hostContactFindUniqueArgs} args - Arguments to find a HostContact
     * @example
     * // Get one HostContact
     * const hostContact = await prisma.hostContact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends hostContactFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, hostContactFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'hostContact'> extends True ? Prisma__hostContactClient<hostContactGetPayload<T>> : Prisma__hostContactClient<hostContactGetPayload<T> | null, null>

    /**
     * Find one HostContact that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {hostContactFindUniqueOrThrowArgs} args - Arguments to find a HostContact
     * @example
     * // Get one HostContact
     * const hostContact = await prisma.hostContact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends hostContactFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, hostContactFindUniqueOrThrowArgs>
    ): Prisma__hostContactClient<hostContactGetPayload<T>>

    /**
     * Find the first HostContact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hostContactFindFirstArgs} args - Arguments to find a HostContact
     * @example
     * // Get one HostContact
     * const hostContact = await prisma.hostContact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends hostContactFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, hostContactFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'hostContact'> extends True ? Prisma__hostContactClient<hostContactGetPayload<T>> : Prisma__hostContactClient<hostContactGetPayload<T> | null, null>

    /**
     * Find the first HostContact that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hostContactFindFirstOrThrowArgs} args - Arguments to find a HostContact
     * @example
     * // Get one HostContact
     * const hostContact = await prisma.hostContact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends hostContactFindFirstOrThrowArgs>(
      args?: SelectSubset<T, hostContactFindFirstOrThrowArgs>
    ): Prisma__hostContactClient<hostContactGetPayload<T>>

    /**
     * Find zero or more HostContacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hostContactFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HostContacts
     * const hostContacts = await prisma.hostContact.findMany()
     * 
     * // Get first 10 HostContacts
     * const hostContacts = await prisma.hostContact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hostContactWithIdOnly = await prisma.hostContact.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends hostContactFindManyArgs>(
      args?: SelectSubset<T, hostContactFindManyArgs>
    ): PrismaPromise<Array<hostContactGetPayload<T>>>

    /**
     * Create a HostContact.
     * @param {hostContactCreateArgs} args - Arguments to create a HostContact.
     * @example
     * // Create one HostContact
     * const HostContact = await prisma.hostContact.create({
     *   data: {
     *     // ... data to create a HostContact
     *   }
     * })
     * 
    **/
    create<T extends hostContactCreateArgs>(
      args: SelectSubset<T, hostContactCreateArgs>
    ): Prisma__hostContactClient<hostContactGetPayload<T>>

    /**
     * Create many HostContacts.
     *     @param {hostContactCreateManyArgs} args - Arguments to create many HostContacts.
     *     @example
     *     // Create many HostContacts
     *     const hostContact = await prisma.hostContact.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends hostContactCreateManyArgs>(
      args?: SelectSubset<T, hostContactCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a HostContact.
     * @param {hostContactDeleteArgs} args - Arguments to delete one HostContact.
     * @example
     * // Delete one HostContact
     * const HostContact = await prisma.hostContact.delete({
     *   where: {
     *     // ... filter to delete one HostContact
     *   }
     * })
     * 
    **/
    delete<T extends hostContactDeleteArgs>(
      args: SelectSubset<T, hostContactDeleteArgs>
    ): Prisma__hostContactClient<hostContactGetPayload<T>>

    /**
     * Update one HostContact.
     * @param {hostContactUpdateArgs} args - Arguments to update one HostContact.
     * @example
     * // Update one HostContact
     * const hostContact = await prisma.hostContact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends hostContactUpdateArgs>(
      args: SelectSubset<T, hostContactUpdateArgs>
    ): Prisma__hostContactClient<hostContactGetPayload<T>>

    /**
     * Delete zero or more HostContacts.
     * @param {hostContactDeleteManyArgs} args - Arguments to filter HostContacts to delete.
     * @example
     * // Delete a few HostContacts
     * const { count } = await prisma.hostContact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends hostContactDeleteManyArgs>(
      args?: SelectSubset<T, hostContactDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hostContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HostContacts
     * const hostContact = await prisma.hostContact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends hostContactUpdateManyArgs>(
      args: SelectSubset<T, hostContactUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one HostContact.
     * @param {hostContactUpsertArgs} args - Arguments to update or create a HostContact.
     * @example
     * // Update or create a HostContact
     * const hostContact = await prisma.hostContact.upsert({
     *   create: {
     *     // ... data to create a HostContact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HostContact we want to update
     *   }
     * })
    **/
    upsert<T extends hostContactUpsertArgs>(
      args: SelectSubset<T, hostContactUpsertArgs>
    ): Prisma__hostContactClient<hostContactGetPayload<T>>

    /**
     * Count the number of HostContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hostContactCountArgs} args - Arguments to filter HostContacts to count.
     * @example
     * // Count the number of HostContacts
     * const count = await prisma.hostContact.count({
     *   where: {
     *     // ... the filter for the HostContacts we want to count
     *   }
     * })
    **/
    count<T extends hostContactCountArgs>(
      args?: Subset<T, hostContactCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HostContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HostContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HostContactAggregateArgs>(args: Subset<T, HostContactAggregateArgs>): PrismaPromise<GetHostContactAggregateType<T>>

    /**
     * Group by HostContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HostContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HostContactGroupByArgs['orderBy'] }
        : { orderBy?: HostContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HostContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHostContactGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for hostContact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__hostContactClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    host<T extends HostArgs= {}>(args?: Subset<T, HostArgs>): Prisma__HostClient<HostGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * hostContact base type for findUnique actions
   */
  export type hostContactFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the hostContact
     */
    select?: hostContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostContactInclude | null
    /**
     * Filter, which hostContact to fetch.
     */
    where: hostContactWhereUniqueInput
  }

  /**
   * hostContact findUnique
   */
  export interface hostContactFindUniqueArgs extends hostContactFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * hostContact findUniqueOrThrow
   */
  export type hostContactFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the hostContact
     */
    select?: hostContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostContactInclude | null
    /**
     * Filter, which hostContact to fetch.
     */
    where: hostContactWhereUniqueInput
  }


  /**
   * hostContact base type for findFirst actions
   */
  export type hostContactFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the hostContact
     */
    select?: hostContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostContactInclude | null
    /**
     * Filter, which hostContact to fetch.
     */
    where?: hostContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hostContacts to fetch.
     */
    orderBy?: Enumerable<hostContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hostContacts.
     */
    cursor?: hostContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hostContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hostContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hostContacts.
     */
    distinct?: Enumerable<HostContactScalarFieldEnum>
  }

  /**
   * hostContact findFirst
   */
  export interface hostContactFindFirstArgs extends hostContactFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * hostContact findFirstOrThrow
   */
  export type hostContactFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the hostContact
     */
    select?: hostContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostContactInclude | null
    /**
     * Filter, which hostContact to fetch.
     */
    where?: hostContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hostContacts to fetch.
     */
    orderBy?: Enumerable<hostContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hostContacts.
     */
    cursor?: hostContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hostContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hostContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hostContacts.
     */
    distinct?: Enumerable<HostContactScalarFieldEnum>
  }


  /**
   * hostContact findMany
   */
  export type hostContactFindManyArgs = {
    /**
     * Select specific fields to fetch from the hostContact
     */
    select?: hostContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostContactInclude | null
    /**
     * Filter, which hostContacts to fetch.
     */
    where?: hostContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hostContacts to fetch.
     */
    orderBy?: Enumerable<hostContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing hostContacts.
     */
    cursor?: hostContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hostContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hostContacts.
     */
    skip?: number
    distinct?: Enumerable<HostContactScalarFieldEnum>
  }


  /**
   * hostContact create
   */
  export type hostContactCreateArgs = {
    /**
     * Select specific fields to fetch from the hostContact
     */
    select?: hostContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostContactInclude | null
    /**
     * The data needed to create a hostContact.
     */
    data: XOR<hostContactCreateInput, hostContactUncheckedCreateInput>
  }


  /**
   * hostContact createMany
   */
  export type hostContactCreateManyArgs = {
    /**
     * The data used to create many hostContacts.
     */
    data: Enumerable<hostContactCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * hostContact update
   */
  export type hostContactUpdateArgs = {
    /**
     * Select specific fields to fetch from the hostContact
     */
    select?: hostContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostContactInclude | null
    /**
     * The data needed to update a hostContact.
     */
    data: XOR<hostContactUpdateInput, hostContactUncheckedUpdateInput>
    /**
     * Choose, which hostContact to update.
     */
    where: hostContactWhereUniqueInput
  }


  /**
   * hostContact updateMany
   */
  export type hostContactUpdateManyArgs = {
    /**
     * The data used to update hostContacts.
     */
    data: XOR<hostContactUpdateManyMutationInput, hostContactUncheckedUpdateManyInput>
    /**
     * Filter which hostContacts to update
     */
    where?: hostContactWhereInput
  }


  /**
   * hostContact upsert
   */
  export type hostContactUpsertArgs = {
    /**
     * Select specific fields to fetch from the hostContact
     */
    select?: hostContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostContactInclude | null
    /**
     * The filter to search for the hostContact to update in case it exists.
     */
    where: hostContactWhereUniqueInput
    /**
     * In case the hostContact found by the `where` argument doesn't exist, create a new hostContact with this data.
     */
    create: XOR<hostContactCreateInput, hostContactUncheckedCreateInput>
    /**
     * In case the hostContact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<hostContactUpdateInput, hostContactUncheckedUpdateInput>
  }


  /**
   * hostContact delete
   */
  export type hostContactDeleteArgs = {
    /**
     * Select specific fields to fetch from the hostContact
     */
    select?: hostContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostContactInclude | null
    /**
     * Filter which hostContact to delete.
     */
    where: hostContactWhereUniqueInput
  }


  /**
   * hostContact deleteMany
   */
  export type hostContactDeleteManyArgs = {
    /**
     * Filter which hostContacts to delete
     */
    where?: hostContactWhereInput
  }


  /**
   * hostContact without action
   */
  export type hostContactArgs = {
    /**
     * Select specific fields to fetch from the hostContact
     */
    select?: hostContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: hostContactInclude | null
  }



  /**
   * Model Review
   */


  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    hostId: number | null
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    userId: number | null
    hostId: number | null
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    userId: number | null
    hostId: number | null
    postDate: string | null
    rating: number | null
    text: string | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    hostId: number | null
    postDate: string | null
    rating: number | null
    text: string | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    userId: number
    hostId: number
    postDate: number
    rating: number
    text: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    userId?: true
    hostId?: true
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    userId?: true
    hostId?: true
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    userId?: true
    hostId?: true
    postDate?: true
    rating?: true
    text?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    userId?: true
    hostId?: true
    postDate?: true
    rating?: true
    text?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    userId?: true
    hostId?: true
    postDate?: true
    rating?: true
    text?: true
    _all?: true
  }

  export type ReviewAggregateArgs = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs = {
    where?: ReviewWhereInput
    orderBy?: Enumerable<ReviewOrderByWithAggregationInput>
    by: ReviewScalarFieldEnum[]
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }


  export type ReviewGroupByOutputType = {
    id: number
    userId: number
    hostId: number
    postDate: string
    rating: number
    text: string | null
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect = {
    id?: boolean
    userId?: boolean
    user?: boolean | UserArgs
    hostId?: boolean
    host?: boolean | HostArgs
    postDate?: boolean
    rating?: boolean
    text?: boolean
  }


  export type ReviewInclude = {
    user?: boolean | UserArgs
    host?: boolean | HostArgs
  }

  export type ReviewGetPayload<S extends boolean | null | undefined | ReviewArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Review :
    S extends undefined ? never :
    S extends { include: any } & (ReviewArgs | ReviewFindManyArgs)
    ? Review  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'host' ? HostGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ReviewArgs | ReviewFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'host' ? HostGetPayload<S['select'][P]> :  P extends keyof Review ? Review[P] : never
  } 
      : Review


  type ReviewCountArgs = 
    Omit<ReviewFindManyArgs, 'select' | 'include'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReviewFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReviewFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Review'> extends True ? Prisma__ReviewClient<ReviewGetPayload<T>> : Prisma__ReviewClient<ReviewGetPayload<T> | null, null>

    /**
     * Find one Review that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReviewFindUniqueOrThrowArgs>
    ): Prisma__ReviewClient<ReviewGetPayload<T>>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReviewFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReviewFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Review'> extends True ? Prisma__ReviewClient<ReviewGetPayload<T>> : Prisma__ReviewClient<ReviewGetPayload<T> | null, null>

    /**
     * Find the first Review that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReviewFindFirstOrThrowArgs>
    ): Prisma__ReviewClient<ReviewGetPayload<T>>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReviewFindManyArgs>(
      args?: SelectSubset<T, ReviewFindManyArgs>
    ): PrismaPromise<Array<ReviewGetPayload<T>>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
    **/
    create<T extends ReviewCreateArgs>(
      args: SelectSubset<T, ReviewCreateArgs>
    ): Prisma__ReviewClient<ReviewGetPayload<T>>

    /**
     * Create many Reviews.
     *     @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     *     @example
     *     // Create many Reviews
     *     const review = await prisma.review.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReviewCreateManyArgs>(
      args?: SelectSubset<T, ReviewCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
    **/
    delete<T extends ReviewDeleteArgs>(
      args: SelectSubset<T, ReviewDeleteArgs>
    ): Prisma__ReviewClient<ReviewGetPayload<T>>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReviewUpdateArgs>(
      args: SelectSubset<T, ReviewUpdateArgs>
    ): Prisma__ReviewClient<ReviewGetPayload<T>>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReviewDeleteManyArgs>(
      args?: SelectSubset<T, ReviewDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReviewUpdateManyArgs>(
      args: SelectSubset<T, ReviewUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
    **/
    upsert<T extends ReviewUpsertArgs>(
      args: SelectSubset<T, ReviewUpsertArgs>
    ): Prisma__ReviewClient<ReviewGetPayload<T>>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReviewClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    host<T extends HostArgs= {}>(args?: Subset<T, HostArgs>): Prisma__HostClient<HostGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Review base type for findUnique actions
   */
  export type ReviewFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUnique
   */
  export interface ReviewFindUniqueArgs extends ReviewFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review base type for findFirst actions
   */
  export type ReviewFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: Enumerable<ReviewScalarFieldEnum>
  }

  /**
   * Review findFirst
   */
  export interface ReviewFindFirstArgs extends ReviewFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: Enumerable<ReviewScalarFieldEnum>
  }


  /**
   * Review findMany
   */
  export type ReviewFindManyArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: Enumerable<ReviewScalarFieldEnum>
  }


  /**
   * Review create
   */
  export type ReviewCreateArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }


  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs = {
    /**
     * The data used to create many Reviews.
     */
    data: Enumerable<ReviewCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Review update
   */
  export type ReviewUpdateArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
  }


  /**
   * Review upsert
   */
  export type ReviewUpsertArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }


  /**
   * Review delete
   */
  export type ReviewDeleteArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
  }


  /**
   * Review without action
   */
  export type ReviewArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const HostAddressScalarFieldEnum: {
    id: 'id',
    street: 'street',
    number: 'number',
    cep: 'cep',
    district: 'district',
    city: 'city',
    state: 'state',
    hostId: 'hostId'
  };

  export type HostAddressScalarFieldEnum = (typeof HostAddressScalarFieldEnum)[keyof typeof HostAddressScalarFieldEnum]


  export const HostContactScalarFieldEnum: {
    id: 'id',
    insta: 'insta',
    face: 'face',
    mobile: 'mobile',
    phone: 'phone',
    email: 'email'
  };

  export type HostContactScalarFieldEnum = (typeof HostContactScalarFieldEnum)[keyof typeof HostContactScalarFieldEnum]


  export const HostScalarFieldEnum: {
    id: 'id',
    hostName: 'hostName',
    password: 'password'
  };

  export type HostScalarFieldEnum = (typeof HostScalarFieldEnum)[keyof typeof HostScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    hostId: 'hostId',
    postDate: 'postDate',
    rating: 'rating',
    text: 'text'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    name: 'name'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserPersonalDataScalarFieldEnum: {
    id: 'id',
    cellNumber: 'cellNumber',
    firstName: 'firstName',
    lastName: 'lastName',
    dateOfBirth: 'dateOfBirth',
    email: 'email',
    userId: 'userId'
  };

  export type UserPersonalDataScalarFieldEnum = (typeof UserPersonalDataScalarFieldEnum)[keyof typeof UserPersonalDataScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
    personalData?: XOR<UserPersonalDataRelationFilter, userPersonalDataWhereInput> | null
    roles?: RoleListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    personalData?: userPersonalDataOrderByWithRelationInput
    roles?: RoleOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type HostWhereInput = {
    AND?: Enumerable<HostWhereInput>
    OR?: Enumerable<HostWhereInput>
    NOT?: Enumerable<HostWhereInput>
    id?: IntFilter | number
    hostName?: StringFilter | string
    password?: StringFilter | string
    address?: HostAddressListRelationFilter
    contact?: HostContactListRelationFilter
    roles?: RoleListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type HostOrderByWithRelationInput = {
    id?: SortOrder
    hostName?: SortOrder
    password?: SortOrder
    address?: hostAddressOrderByRelationAggregateInput
    contact?: hostContactOrderByRelationAggregateInput
    roles?: RoleOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type HostWhereUniqueInput = {
    id?: number
  }

  export type HostOrderByWithAggregationInput = {
    id?: SortOrder
    hostName?: SortOrder
    password?: SortOrder
    _count?: HostCountOrderByAggregateInput
    _avg?: HostAvgOrderByAggregateInput
    _max?: HostMaxOrderByAggregateInput
    _min?: HostMinOrderByAggregateInput
    _sum?: HostSumOrderByAggregateInput
  }

  export type HostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HostScalarWhereWithAggregatesInput>
    OR?: Enumerable<HostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    hostName?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type userPersonalDataWhereInput = {
    AND?: Enumerable<userPersonalDataWhereInput>
    OR?: Enumerable<userPersonalDataWhereInput>
    NOT?: Enumerable<userPersonalDataWhereInput>
    id?: IntFilter | number
    cellNumber?: StringNullableFilter | string | null
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    dateOfBirth?: StringNullableFilter | string | null
    email?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    userId?: IntNullableFilter | number | null
  }

  export type userPersonalDataOrderByWithRelationInput = {
    id?: SortOrder
    cellNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    email?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
  }

  export type userPersonalDataWhereUniqueInput = {
    id?: number
    email?: string
    userId?: number
  }

  export type userPersonalDataOrderByWithAggregationInput = {
    id?: SortOrder
    cellNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    email?: SortOrder
    userId?: SortOrder
    _count?: userPersonalDataCountOrderByAggregateInput
    _avg?: userPersonalDataAvgOrderByAggregateInput
    _max?: userPersonalDataMaxOrderByAggregateInput
    _min?: userPersonalDataMinOrderByAggregateInput
    _sum?: userPersonalDataSumOrderByAggregateInput
  }

  export type userPersonalDataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userPersonalDataScalarWhereWithAggregatesInput>
    OR?: Enumerable<userPersonalDataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userPersonalDataScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    cellNumber?: StringNullableWithAggregatesFilter | string | null
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    dateOfBirth?: StringNullableWithAggregatesFilter | string | null
    email?: StringWithAggregatesFilter | string
    userId?: IntNullableWithAggregatesFilter | number | null
  }

  export type RoleWhereInput = {
    AND?: Enumerable<RoleWhereInput>
    OR?: Enumerable<RoleWhereInput>
    NOT?: Enumerable<RoleWhereInput>
    name?: StringFilter | string
    users?: UserListRelationFilter
    hosts?: HostListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
    hosts?: HostOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = {
    name?: string
  }

  export type RoleOrderByWithAggregationInput = {
    name?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RoleScalarWhereWithAggregatesInput>
    OR?: Enumerable<RoleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RoleScalarWhereWithAggregatesInput>
    name?: StringWithAggregatesFilter | string
  }

  export type hostAddressWhereInput = {
    AND?: Enumerable<hostAddressWhereInput>
    OR?: Enumerable<hostAddressWhereInput>
    NOT?: Enumerable<hostAddressWhereInput>
    id?: IntFilter | number
    street?: StringFilter | string
    number?: StringFilter | string
    cep?: StringFilter | string
    district?: StringFilter | string
    city?: StringFilter | string
    state?: StringFilter | string
    host?: XOR<HostRelationFilter, HostWhereInput> | null
    hostId?: IntNullableFilter | number | null
  }

  export type hostAddressOrderByWithRelationInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    cep?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    host?: HostOrderByWithRelationInput
    hostId?: SortOrder
  }

  export type hostAddressWhereUniqueInput = {
    id?: number
  }

  export type hostAddressOrderByWithAggregationInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    cep?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    hostId?: SortOrder
    _count?: hostAddressCountOrderByAggregateInput
    _avg?: hostAddressAvgOrderByAggregateInput
    _max?: hostAddressMaxOrderByAggregateInput
    _min?: hostAddressMinOrderByAggregateInput
    _sum?: hostAddressSumOrderByAggregateInput
  }

  export type hostAddressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<hostAddressScalarWhereWithAggregatesInput>
    OR?: Enumerable<hostAddressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<hostAddressScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    street?: StringWithAggregatesFilter | string
    number?: StringWithAggregatesFilter | string
    cep?: StringWithAggregatesFilter | string
    district?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    hostId?: IntNullableWithAggregatesFilter | number | null
  }

  export type hostContactWhereInput = {
    AND?: Enumerable<hostContactWhereInput>
    OR?: Enumerable<hostContactWhereInput>
    NOT?: Enumerable<hostContactWhereInput>
    id?: IntFilter | number
    insta?: StringNullableFilter | string | null
    face?: StringNullableFilter | string | null
    mobile?: StringNullableFilter | string | null
    phone?: StringFilter | string
    email?: StringFilter | string
    host?: XOR<HostRelationFilter, HostWhereInput> | null
  }

  export type hostContactOrderByWithRelationInput = {
    id?: SortOrder
    insta?: SortOrder
    face?: SortOrder
    mobile?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    host?: HostOrderByWithRelationInput
  }

  export type hostContactWhereUniqueInput = {
    id?: number
    insta?: string
    face?: string
    mobile?: string
    phone?: string
    email?: string
  }

  export type hostContactOrderByWithAggregationInput = {
    id?: SortOrder
    insta?: SortOrder
    face?: SortOrder
    mobile?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    _count?: hostContactCountOrderByAggregateInput
    _avg?: hostContactAvgOrderByAggregateInput
    _max?: hostContactMaxOrderByAggregateInput
    _min?: hostContactMinOrderByAggregateInput
    _sum?: hostContactSumOrderByAggregateInput
  }

  export type hostContactScalarWhereWithAggregatesInput = {
    AND?: Enumerable<hostContactScalarWhereWithAggregatesInput>
    OR?: Enumerable<hostContactScalarWhereWithAggregatesInput>
    NOT?: Enumerable<hostContactScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    insta?: StringNullableWithAggregatesFilter | string | null
    face?: StringNullableWithAggregatesFilter | string | null
    mobile?: StringNullableWithAggregatesFilter | string | null
    phone?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
  }

  export type ReviewWhereInput = {
    AND?: Enumerable<ReviewWhereInput>
    OR?: Enumerable<ReviewWhereInput>
    NOT?: Enumerable<ReviewWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    hostId?: IntFilter | number
    host?: XOR<HostRelationFilter, HostWhereInput>
    postDate?: StringFilter | string
    rating?: IntFilter | number
    text?: StringNullableFilter | string | null
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    hostId?: SortOrder
    host?: HostOrderByWithRelationInput
    postDate?: SortOrder
    rating?: SortOrder
    text?: SortOrder
  }

  export type ReviewWhereUniqueInput = {
    id_userId_hostId?: ReviewIdUserIdHostIdCompoundUniqueInput
  }

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    hostId?: SortOrder
    postDate?: SortOrder
    rating?: SortOrder
    text?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReviewScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReviewScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReviewScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    hostId?: IntWithAggregatesFilter | number
    postDate?: StringWithAggregatesFilter | string
    rating?: IntWithAggregatesFilter | number
    text?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserCreateInput = {
    username: string
    password: string
    personalData?: userPersonalDataCreateNestedOneWithoutUserInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    personalData?: userPersonalDataUncheckedCreateNestedOneWithoutUserInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    personalData?: userPersonalDataUpdateOneWithoutUserNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    personalData?: userPersonalDataUncheckedUpdateOneWithoutUserNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type HostCreateInput = {
    hostName: string
    password: string
    address?: hostAddressCreateNestedManyWithoutHostInput
    contact?: hostContactCreateNestedManyWithoutHostInput
    roles?: RoleCreateNestedManyWithoutHostsInput
    reviews?: ReviewCreateNestedManyWithoutHostInput
  }

  export type HostUncheckedCreateInput = {
    id?: number
    hostName: string
    password: string
    address?: hostAddressUncheckedCreateNestedManyWithoutHostInput
    contact?: hostContactUncheckedCreateNestedManyWithoutHostInput
    roles?: RoleUncheckedCreateNestedManyWithoutHostsInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutHostInput
  }

  export type HostUpdateInput = {
    hostName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: hostAddressUpdateManyWithoutHostNestedInput
    contact?: hostContactUpdateManyWithoutHostNestedInput
    roles?: RoleUpdateManyWithoutHostsNestedInput
    reviews?: ReviewUpdateManyWithoutHostNestedInput
  }

  export type HostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: hostAddressUncheckedUpdateManyWithoutHostNestedInput
    contact?: hostContactUncheckedUpdateManyWithoutHostNestedInput
    roles?: RoleUncheckedUpdateManyWithoutHostsNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutHostNestedInput
  }

  export type HostCreateManyInput = {
    id?: number
    hostName: string
    password: string
  }

  export type HostUpdateManyMutationInput = {
    hostName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type HostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userPersonalDataCreateInput = {
    cellNumber?: string | null
    firstName: string
    lastName: string
    dateOfBirth?: string | null
    email: string
    user?: UserCreateNestedOneWithoutPersonalDataInput
  }

  export type userPersonalDataUncheckedCreateInput = {
    id?: number
    cellNumber?: string | null
    firstName: string
    lastName: string
    dateOfBirth?: string | null
    email: string
    userId?: number | null
  }

  export type userPersonalDataUpdateInput = {
    cellNumber?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutPersonalDataNestedInput
  }

  export type userPersonalDataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cellNumber?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type userPersonalDataCreateManyInput = {
    id?: number
    cellNumber?: string | null
    firstName: string
    lastName: string
    dateOfBirth?: string | null
    email: string
    userId?: number | null
  }

  export type userPersonalDataUpdateManyMutationInput = {
    cellNumber?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
  }

  export type userPersonalDataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cellNumber?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RoleCreateInput = {
    name: string
    users?: UserCreateNestedManyWithoutRolesInput
    hosts?: HostCreateNestedManyWithoutRolesInput
  }

  export type RoleUncheckedCreateInput = {
    name: string
    users?: UserUncheckedCreateNestedManyWithoutRolesInput
    hosts?: HostUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutRolesNestedInput
    hosts?: HostUpdateManyWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutRolesNestedInput
    hosts?: HostUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type RoleCreateManyInput = {
    name: string
  }

  export type RoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type hostAddressCreateInput = {
    street: string
    number: string
    cep: string
    district: string
    city: string
    state: string
    host?: HostCreateNestedOneWithoutAddressInput
  }

  export type hostAddressUncheckedCreateInput = {
    id?: number
    street: string
    number: string
    cep: string
    district: string
    city: string
    state: string
    hostId?: number | null
  }

  export type hostAddressUpdateInput = {
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    host?: HostUpdateOneWithoutAddressNestedInput
  }

  export type hostAddressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    hostId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type hostAddressCreateManyInput = {
    id?: number
    street: string
    number: string
    cep: string
    district: string
    city: string
    state: string
    hostId?: number | null
  }

  export type hostAddressUpdateManyMutationInput = {
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type hostAddressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    hostId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type hostContactCreateInput = {
    insta?: string | null
    face?: string | null
    mobile?: string | null
    phone: string
    email: string
    host?: HostCreateNestedOneWithoutContactInput
  }

  export type hostContactUncheckedCreateInput = {
    id?: number
    insta?: string | null
    face?: string | null
    mobile?: string | null
    phone: string
    email: string
  }

  export type hostContactUpdateInput = {
    insta?: NullableStringFieldUpdateOperationsInput | string | null
    face?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    host?: HostUpdateOneWithoutContactNestedInput
  }

  export type hostContactUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    insta?: NullableStringFieldUpdateOperationsInput | string | null
    face?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type hostContactCreateManyInput = {
    id?: number
    insta?: string | null
    face?: string | null
    mobile?: string | null
    phone: string
    email: string
  }

  export type hostContactUpdateManyMutationInput = {
    insta?: NullableStringFieldUpdateOperationsInput | string | null
    face?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type hostContactUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    insta?: NullableStringFieldUpdateOperationsInput | string | null
    face?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewCreateInput = {
    id?: number
    user: UserCreateNestedOneWithoutReviewsInput
    host: HostCreateNestedOneWithoutReviewsInput
    postDate: string
    rating: number
    text?: string | null
  }

  export type ReviewUncheckedCreateInput = {
    id?: number
    userId: number
    hostId: number
    postDate: string
    rating: number
    text?: string | null
  }

  export type ReviewUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    host?: HostUpdateOneRequiredWithoutReviewsNestedInput
    postDate?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    postDate?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewCreateManyInput = {
    id?: number
    userId: number
    hostId: number
    postDate: string
    rating: number
    text?: string | null
  }

  export type ReviewUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    postDate?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    postDate?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type UserPersonalDataRelationFilter = {
    is?: userPersonalDataWhereInput | null
    isNot?: userPersonalDataWhereInput | null
  }

  export type RoleListRelationFilter = {
    every?: RoleWhereInput
    some?: RoleWhereInput
    none?: RoleWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type RoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type HostAddressListRelationFilter = {
    every?: hostAddressWhereInput
    some?: hostAddressWhereInput
    none?: hostAddressWhereInput
  }

  export type HostContactListRelationFilter = {
    every?: hostContactWhereInput
    some?: hostContactWhereInput
    none?: hostContactWhereInput
  }

  export type hostAddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type hostContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HostCountOrderByAggregateInput = {
    id?: SortOrder
    hostName?: SortOrder
    password?: SortOrder
  }

  export type HostAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type HostMaxOrderByAggregateInput = {
    id?: SortOrder
    hostName?: SortOrder
    password?: SortOrder
  }

  export type HostMinOrderByAggregateInput = {
    id?: SortOrder
    hostName?: SortOrder
    password?: SortOrder
  }

  export type HostSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type userPersonalDataCountOrderByAggregateInput = {
    id?: SortOrder
    cellNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    email?: SortOrder
    userId?: SortOrder
  }

  export type userPersonalDataAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type userPersonalDataMaxOrderByAggregateInput = {
    id?: SortOrder
    cellNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    email?: SortOrder
    userId?: SortOrder
  }

  export type userPersonalDataMinOrderByAggregateInput = {
    id?: SortOrder
    cellNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    email?: SortOrder
    userId?: SortOrder
  }

  export type userPersonalDataSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type HostListRelationFilter = {
    every?: HostWhereInput
    some?: HostWhereInput
    none?: HostWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    name?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    name?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    name?: SortOrder
  }

  export type HostRelationFilter = {
    is?: HostWhereInput | null
    isNot?: HostWhereInput | null
  }

  export type hostAddressCountOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    cep?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    hostId?: SortOrder
  }

  export type hostAddressAvgOrderByAggregateInput = {
    id?: SortOrder
    hostId?: SortOrder
  }

  export type hostAddressMaxOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    cep?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    hostId?: SortOrder
  }

  export type hostAddressMinOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    cep?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    hostId?: SortOrder
  }

  export type hostAddressSumOrderByAggregateInput = {
    id?: SortOrder
    hostId?: SortOrder
  }

  export type hostContactCountOrderByAggregateInput = {
    id?: SortOrder
    insta?: SortOrder
    face?: SortOrder
    mobile?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type hostContactAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type hostContactMaxOrderByAggregateInput = {
    id?: SortOrder
    insta?: SortOrder
    face?: SortOrder
    mobile?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type hostContactMinOrderByAggregateInput = {
    id?: SortOrder
    insta?: SortOrder
    face?: SortOrder
    mobile?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type hostContactSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ReviewIdUserIdHostIdCompoundUniqueInput = {
    id: number
    userId: number
    hostId: number
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hostId?: SortOrder
    postDate?: SortOrder
    rating?: SortOrder
    text?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hostId?: SortOrder
    rating?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hostId?: SortOrder
    postDate?: SortOrder
    rating?: SortOrder
    text?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hostId?: SortOrder
    postDate?: SortOrder
    rating?: SortOrder
    text?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hostId?: SortOrder
    rating?: SortOrder
  }

  export type userPersonalDataCreateNestedOneWithoutUserInput = {
    create?: XOR<userPersonalDataCreateWithoutUserInput, userPersonalDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: userPersonalDataCreateOrConnectWithoutUserInput
    connect?: userPersonalDataWhereUniqueInput
  }

  export type RoleCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<RoleCreateWithoutUsersInput>, Enumerable<RoleUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<RoleCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<RoleWhereUniqueInput>
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutUserInput>, Enumerable<ReviewUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutUserInput>
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: Enumerable<ReviewWhereUniqueInput>
  }

  export type userPersonalDataUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<userPersonalDataCreateWithoutUserInput, userPersonalDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: userPersonalDataCreateOrConnectWithoutUserInput
    connect?: userPersonalDataWhereUniqueInput
  }

  export type RoleUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<RoleCreateWithoutUsersInput>, Enumerable<RoleUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<RoleCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<RoleWhereUniqueInput>
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutUserInput>, Enumerable<ReviewUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutUserInput>
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: Enumerable<ReviewWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type userPersonalDataUpdateOneWithoutUserNestedInput = {
    create?: XOR<userPersonalDataCreateWithoutUserInput, userPersonalDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: userPersonalDataCreateOrConnectWithoutUserInput
    upsert?: userPersonalDataUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: userPersonalDataWhereUniqueInput
    update?: XOR<userPersonalDataUpdateWithoutUserInput, userPersonalDataUncheckedUpdateWithoutUserInput>
  }

  export type RoleUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<RoleCreateWithoutUsersInput>, Enumerable<RoleUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<RoleCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<RoleUpsertWithWhereUniqueWithoutUsersInput>
    set?: Enumerable<RoleWhereUniqueInput>
    disconnect?: Enumerable<RoleWhereUniqueInput>
    delete?: Enumerable<RoleWhereUniqueInput>
    connect?: Enumerable<RoleWhereUniqueInput>
    update?: Enumerable<RoleUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<RoleUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<RoleScalarWhereInput>
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutUserInput>, Enumerable<ReviewUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ReviewUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: Enumerable<ReviewWhereUniqueInput>
    disconnect?: Enumerable<ReviewWhereUniqueInput>
    delete?: Enumerable<ReviewWhereUniqueInput>
    connect?: Enumerable<ReviewWhereUniqueInput>
    update?: Enumerable<ReviewUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ReviewUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ReviewScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type userPersonalDataUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<userPersonalDataCreateWithoutUserInput, userPersonalDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: userPersonalDataCreateOrConnectWithoutUserInput
    upsert?: userPersonalDataUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: userPersonalDataWhereUniqueInput
    update?: XOR<userPersonalDataUpdateWithoutUserInput, userPersonalDataUncheckedUpdateWithoutUserInput>
  }

  export type RoleUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<RoleCreateWithoutUsersInput>, Enumerable<RoleUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<RoleCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<RoleUpsertWithWhereUniqueWithoutUsersInput>
    set?: Enumerable<RoleWhereUniqueInput>
    disconnect?: Enumerable<RoleWhereUniqueInput>
    delete?: Enumerable<RoleWhereUniqueInput>
    connect?: Enumerable<RoleWhereUniqueInput>
    update?: Enumerable<RoleUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<RoleUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<RoleScalarWhereInput>
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutUserInput>, Enumerable<ReviewUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ReviewUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: Enumerable<ReviewWhereUniqueInput>
    disconnect?: Enumerable<ReviewWhereUniqueInput>
    delete?: Enumerable<ReviewWhereUniqueInput>
    connect?: Enumerable<ReviewWhereUniqueInput>
    update?: Enumerable<ReviewUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ReviewUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ReviewScalarWhereInput>
  }

  export type hostAddressCreateNestedManyWithoutHostInput = {
    create?: XOR<Enumerable<hostAddressCreateWithoutHostInput>, Enumerable<hostAddressUncheckedCreateWithoutHostInput>>
    connectOrCreate?: Enumerable<hostAddressCreateOrConnectWithoutHostInput>
    createMany?: hostAddressCreateManyHostInputEnvelope
    connect?: Enumerable<hostAddressWhereUniqueInput>
  }

  export type hostContactCreateNestedManyWithoutHostInput = {
    create?: XOR<Enumerable<hostContactCreateWithoutHostInput>, Enumerable<hostContactUncheckedCreateWithoutHostInput>>
    connectOrCreate?: Enumerable<hostContactCreateOrConnectWithoutHostInput>
    createMany?: hostContactCreateManyHostInputEnvelope
    connect?: Enumerable<hostContactWhereUniqueInput>
  }

  export type RoleCreateNestedManyWithoutHostsInput = {
    create?: XOR<Enumerable<RoleCreateWithoutHostsInput>, Enumerable<RoleUncheckedCreateWithoutHostsInput>>
    connectOrCreate?: Enumerable<RoleCreateOrConnectWithoutHostsInput>
    connect?: Enumerable<RoleWhereUniqueInput>
  }

  export type ReviewCreateNestedManyWithoutHostInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutHostInput>, Enumerable<ReviewUncheckedCreateWithoutHostInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutHostInput>
    createMany?: ReviewCreateManyHostInputEnvelope
    connect?: Enumerable<ReviewWhereUniqueInput>
  }

  export type hostAddressUncheckedCreateNestedManyWithoutHostInput = {
    create?: XOR<Enumerable<hostAddressCreateWithoutHostInput>, Enumerable<hostAddressUncheckedCreateWithoutHostInput>>
    connectOrCreate?: Enumerable<hostAddressCreateOrConnectWithoutHostInput>
    createMany?: hostAddressCreateManyHostInputEnvelope
    connect?: Enumerable<hostAddressWhereUniqueInput>
  }

  export type hostContactUncheckedCreateNestedManyWithoutHostInput = {
    create?: XOR<Enumerable<hostContactCreateWithoutHostInput>, Enumerable<hostContactUncheckedCreateWithoutHostInput>>
    connectOrCreate?: Enumerable<hostContactCreateOrConnectWithoutHostInput>
    createMany?: hostContactCreateManyHostInputEnvelope
    connect?: Enumerable<hostContactWhereUniqueInput>
  }

  export type RoleUncheckedCreateNestedManyWithoutHostsInput = {
    create?: XOR<Enumerable<RoleCreateWithoutHostsInput>, Enumerable<RoleUncheckedCreateWithoutHostsInput>>
    connectOrCreate?: Enumerable<RoleCreateOrConnectWithoutHostsInput>
    connect?: Enumerable<RoleWhereUniqueInput>
  }

  export type ReviewUncheckedCreateNestedManyWithoutHostInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutHostInput>, Enumerable<ReviewUncheckedCreateWithoutHostInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutHostInput>
    createMany?: ReviewCreateManyHostInputEnvelope
    connect?: Enumerable<ReviewWhereUniqueInput>
  }

  export type hostAddressUpdateManyWithoutHostNestedInput = {
    create?: XOR<Enumerable<hostAddressCreateWithoutHostInput>, Enumerable<hostAddressUncheckedCreateWithoutHostInput>>
    connectOrCreate?: Enumerable<hostAddressCreateOrConnectWithoutHostInput>
    upsert?: Enumerable<hostAddressUpsertWithWhereUniqueWithoutHostInput>
    createMany?: hostAddressCreateManyHostInputEnvelope
    set?: Enumerable<hostAddressWhereUniqueInput>
    disconnect?: Enumerable<hostAddressWhereUniqueInput>
    delete?: Enumerable<hostAddressWhereUniqueInput>
    connect?: Enumerable<hostAddressWhereUniqueInput>
    update?: Enumerable<hostAddressUpdateWithWhereUniqueWithoutHostInput>
    updateMany?: Enumerable<hostAddressUpdateManyWithWhereWithoutHostInput>
    deleteMany?: Enumerable<hostAddressScalarWhereInput>
  }

  export type hostContactUpdateManyWithoutHostNestedInput = {
    create?: XOR<Enumerable<hostContactCreateWithoutHostInput>, Enumerable<hostContactUncheckedCreateWithoutHostInput>>
    connectOrCreate?: Enumerable<hostContactCreateOrConnectWithoutHostInput>
    upsert?: Enumerable<hostContactUpsertWithWhereUniqueWithoutHostInput>
    createMany?: hostContactCreateManyHostInputEnvelope
    set?: Enumerable<hostContactWhereUniqueInput>
    disconnect?: Enumerable<hostContactWhereUniqueInput>
    delete?: Enumerable<hostContactWhereUniqueInput>
    connect?: Enumerable<hostContactWhereUniqueInput>
    update?: Enumerable<hostContactUpdateWithWhereUniqueWithoutHostInput>
    updateMany?: Enumerable<hostContactUpdateManyWithWhereWithoutHostInput>
    deleteMany?: Enumerable<hostContactScalarWhereInput>
  }

  export type RoleUpdateManyWithoutHostsNestedInput = {
    create?: XOR<Enumerable<RoleCreateWithoutHostsInput>, Enumerable<RoleUncheckedCreateWithoutHostsInput>>
    connectOrCreate?: Enumerable<RoleCreateOrConnectWithoutHostsInput>
    upsert?: Enumerable<RoleUpsertWithWhereUniqueWithoutHostsInput>
    set?: Enumerable<RoleWhereUniqueInput>
    disconnect?: Enumerable<RoleWhereUniqueInput>
    delete?: Enumerable<RoleWhereUniqueInput>
    connect?: Enumerable<RoleWhereUniqueInput>
    update?: Enumerable<RoleUpdateWithWhereUniqueWithoutHostsInput>
    updateMany?: Enumerable<RoleUpdateManyWithWhereWithoutHostsInput>
    deleteMany?: Enumerable<RoleScalarWhereInput>
  }

  export type ReviewUpdateManyWithoutHostNestedInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutHostInput>, Enumerable<ReviewUncheckedCreateWithoutHostInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutHostInput>
    upsert?: Enumerable<ReviewUpsertWithWhereUniqueWithoutHostInput>
    createMany?: ReviewCreateManyHostInputEnvelope
    set?: Enumerable<ReviewWhereUniqueInput>
    disconnect?: Enumerable<ReviewWhereUniqueInput>
    delete?: Enumerable<ReviewWhereUniqueInput>
    connect?: Enumerable<ReviewWhereUniqueInput>
    update?: Enumerable<ReviewUpdateWithWhereUniqueWithoutHostInput>
    updateMany?: Enumerable<ReviewUpdateManyWithWhereWithoutHostInput>
    deleteMany?: Enumerable<ReviewScalarWhereInput>
  }

  export type hostAddressUncheckedUpdateManyWithoutHostNestedInput = {
    create?: XOR<Enumerable<hostAddressCreateWithoutHostInput>, Enumerable<hostAddressUncheckedCreateWithoutHostInput>>
    connectOrCreate?: Enumerable<hostAddressCreateOrConnectWithoutHostInput>
    upsert?: Enumerable<hostAddressUpsertWithWhereUniqueWithoutHostInput>
    createMany?: hostAddressCreateManyHostInputEnvelope
    set?: Enumerable<hostAddressWhereUniqueInput>
    disconnect?: Enumerable<hostAddressWhereUniqueInput>
    delete?: Enumerable<hostAddressWhereUniqueInput>
    connect?: Enumerable<hostAddressWhereUniqueInput>
    update?: Enumerable<hostAddressUpdateWithWhereUniqueWithoutHostInput>
    updateMany?: Enumerable<hostAddressUpdateManyWithWhereWithoutHostInput>
    deleteMany?: Enumerable<hostAddressScalarWhereInput>
  }

  export type hostContactUncheckedUpdateManyWithoutHostNestedInput = {
    create?: XOR<Enumerable<hostContactCreateWithoutHostInput>, Enumerable<hostContactUncheckedCreateWithoutHostInput>>
    connectOrCreate?: Enumerable<hostContactCreateOrConnectWithoutHostInput>
    upsert?: Enumerable<hostContactUpsertWithWhereUniqueWithoutHostInput>
    createMany?: hostContactCreateManyHostInputEnvelope
    set?: Enumerable<hostContactWhereUniqueInput>
    disconnect?: Enumerable<hostContactWhereUniqueInput>
    delete?: Enumerable<hostContactWhereUniqueInput>
    connect?: Enumerable<hostContactWhereUniqueInput>
    update?: Enumerable<hostContactUpdateWithWhereUniqueWithoutHostInput>
    updateMany?: Enumerable<hostContactUpdateManyWithWhereWithoutHostInput>
    deleteMany?: Enumerable<hostContactScalarWhereInput>
  }

  export type RoleUncheckedUpdateManyWithoutHostsNestedInput = {
    create?: XOR<Enumerable<RoleCreateWithoutHostsInput>, Enumerable<RoleUncheckedCreateWithoutHostsInput>>
    connectOrCreate?: Enumerable<RoleCreateOrConnectWithoutHostsInput>
    upsert?: Enumerable<RoleUpsertWithWhereUniqueWithoutHostsInput>
    set?: Enumerable<RoleWhereUniqueInput>
    disconnect?: Enumerable<RoleWhereUniqueInput>
    delete?: Enumerable<RoleWhereUniqueInput>
    connect?: Enumerable<RoleWhereUniqueInput>
    update?: Enumerable<RoleUpdateWithWhereUniqueWithoutHostsInput>
    updateMany?: Enumerable<RoleUpdateManyWithWhereWithoutHostsInput>
    deleteMany?: Enumerable<RoleScalarWhereInput>
  }

  export type ReviewUncheckedUpdateManyWithoutHostNestedInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutHostInput>, Enumerable<ReviewUncheckedCreateWithoutHostInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutHostInput>
    upsert?: Enumerable<ReviewUpsertWithWhereUniqueWithoutHostInput>
    createMany?: ReviewCreateManyHostInputEnvelope
    set?: Enumerable<ReviewWhereUniqueInput>
    disconnect?: Enumerable<ReviewWhereUniqueInput>
    delete?: Enumerable<ReviewWhereUniqueInput>
    connect?: Enumerable<ReviewWhereUniqueInput>
    update?: Enumerable<ReviewUpdateWithWhereUniqueWithoutHostInput>
    updateMany?: Enumerable<ReviewUpdateManyWithWhereWithoutHostInput>
    deleteMany?: Enumerable<ReviewScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutPersonalDataInput = {
    create?: XOR<UserCreateWithoutPersonalDataInput, UserUncheckedCreateWithoutPersonalDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonalDataInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneWithoutPersonalDataNestedInput = {
    create?: XOR<UserCreateWithoutPersonalDataInput, UserUncheckedCreateWithoutPersonalDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonalDataInput
    upsert?: UserUpsertWithoutPersonalDataInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPersonalDataInput, UserUncheckedUpdateWithoutPersonalDataInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedManyWithoutRolesInput = {
    create?: XOR<Enumerable<UserCreateWithoutRolesInput>, Enumerable<UserUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRolesInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type HostCreateNestedManyWithoutRolesInput = {
    create?: XOR<Enumerable<HostCreateWithoutRolesInput>, Enumerable<HostUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<HostCreateOrConnectWithoutRolesInput>
    connect?: Enumerable<HostWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<Enumerable<UserCreateWithoutRolesInput>, Enumerable<UserUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRolesInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type HostUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<Enumerable<HostCreateWithoutRolesInput>, Enumerable<HostUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<HostCreateOrConnectWithoutRolesInput>
    connect?: Enumerable<HostWhereUniqueInput>
  }

  export type UserUpdateManyWithoutRolesNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutRolesInput>, Enumerable<UserUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRolesInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRolesInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRolesInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRolesInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type HostUpdateManyWithoutRolesNestedInput = {
    create?: XOR<Enumerable<HostCreateWithoutRolesInput>, Enumerable<HostUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<HostCreateOrConnectWithoutRolesInput>
    upsert?: Enumerable<HostUpsertWithWhereUniqueWithoutRolesInput>
    set?: Enumerable<HostWhereUniqueInput>
    disconnect?: Enumerable<HostWhereUniqueInput>
    delete?: Enumerable<HostWhereUniqueInput>
    connect?: Enumerable<HostWhereUniqueInput>
    update?: Enumerable<HostUpdateWithWhereUniqueWithoutRolesInput>
    updateMany?: Enumerable<HostUpdateManyWithWhereWithoutRolesInput>
    deleteMany?: Enumerable<HostScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutRolesInput>, Enumerable<UserUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRolesInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRolesInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRolesInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRolesInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type HostUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<Enumerable<HostCreateWithoutRolesInput>, Enumerable<HostUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<HostCreateOrConnectWithoutRolesInput>
    upsert?: Enumerable<HostUpsertWithWhereUniqueWithoutRolesInput>
    set?: Enumerable<HostWhereUniqueInput>
    disconnect?: Enumerable<HostWhereUniqueInput>
    delete?: Enumerable<HostWhereUniqueInput>
    connect?: Enumerable<HostWhereUniqueInput>
    update?: Enumerable<HostUpdateWithWhereUniqueWithoutRolesInput>
    updateMany?: Enumerable<HostUpdateManyWithWhereWithoutRolesInput>
    deleteMany?: Enumerable<HostScalarWhereInput>
  }

  export type HostCreateNestedOneWithoutAddressInput = {
    create?: XOR<HostCreateWithoutAddressInput, HostUncheckedCreateWithoutAddressInput>
    connectOrCreate?: HostCreateOrConnectWithoutAddressInput
    connect?: HostWhereUniqueInput
  }

  export type HostUpdateOneWithoutAddressNestedInput = {
    create?: XOR<HostCreateWithoutAddressInput, HostUncheckedCreateWithoutAddressInput>
    connectOrCreate?: HostCreateOrConnectWithoutAddressInput
    upsert?: HostUpsertWithoutAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: HostWhereUniqueInput
    update?: XOR<HostUpdateWithoutAddressInput, HostUncheckedUpdateWithoutAddressInput>
  }

  export type HostCreateNestedOneWithoutContactInput = {
    create?: XOR<HostCreateWithoutContactInput, HostUncheckedCreateWithoutContactInput>
    connectOrCreate?: HostCreateOrConnectWithoutContactInput
    connect?: HostWhereUniqueInput
  }

  export type HostUpdateOneWithoutContactNestedInput = {
    create?: XOR<HostCreateWithoutContactInput, HostUncheckedCreateWithoutContactInput>
    connectOrCreate?: HostCreateOrConnectWithoutContactInput
    upsert?: HostUpsertWithoutContactInput
    disconnect?: boolean
    delete?: boolean
    connect?: HostWhereUniqueInput
    update?: XOR<HostUpdateWithoutContactInput, HostUncheckedUpdateWithoutContactInput>
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type HostCreateNestedOneWithoutReviewsInput = {
    create?: XOR<HostCreateWithoutReviewsInput, HostUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: HostCreateOrConnectWithoutReviewsInput
    connect?: HostWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type HostUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<HostCreateWithoutReviewsInput, HostUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: HostCreateOrConnectWithoutReviewsInput
    upsert?: HostUpsertWithoutReviewsInput
    connect?: HostWhereUniqueInput
    update?: XOR<HostUpdateWithoutReviewsInput, HostUncheckedUpdateWithoutReviewsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type userPersonalDataCreateWithoutUserInput = {
    cellNumber?: string | null
    firstName: string
    lastName: string
    dateOfBirth?: string | null
    email: string
  }

  export type userPersonalDataUncheckedCreateWithoutUserInput = {
    id?: number
    cellNumber?: string | null
    firstName: string
    lastName: string
    dateOfBirth?: string | null
    email: string
  }

  export type userPersonalDataCreateOrConnectWithoutUserInput = {
    where: userPersonalDataWhereUniqueInput
    create: XOR<userPersonalDataCreateWithoutUserInput, userPersonalDataUncheckedCreateWithoutUserInput>
  }

  export type RoleCreateWithoutUsersInput = {
    name: string
    hosts?: HostCreateNestedManyWithoutRolesInput
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    name: string
    hosts?: HostUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type ReviewCreateWithoutUserInput = {
    id?: number
    host: HostCreateNestedOneWithoutReviewsInput
    postDate: string
    rating: number
    text?: string | null
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    id?: number
    hostId: number
    postDate: string
    rating: number
    text?: string | null
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: Enumerable<ReviewCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type userPersonalDataUpsertWithoutUserInput = {
    update: XOR<userPersonalDataUpdateWithoutUserInput, userPersonalDataUncheckedUpdateWithoutUserInput>
    create: XOR<userPersonalDataCreateWithoutUserInput, userPersonalDataUncheckedCreateWithoutUserInput>
  }

  export type userPersonalDataUpdateWithoutUserInput = {
    cellNumber?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
  }

  export type userPersonalDataUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    cellNumber?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUpsertWithWhereUniqueWithoutUsersInput = {
    where: RoleWhereUniqueInput
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type RoleUpdateWithWhereUniqueWithoutUsersInput = {
    where: RoleWhereUniqueInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateManyWithWhereWithoutUsersInput = {
    where: RoleScalarWhereInput
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyWithoutRolesInput>
  }

  export type RoleScalarWhereInput = {
    AND?: Enumerable<RoleScalarWhereInput>
    OR?: Enumerable<RoleScalarWhereInput>
    NOT?: Enumerable<RoleScalarWhereInput>
    name?: StringFilter | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutReviewsInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: Enumerable<ReviewScalarWhereInput>
    OR?: Enumerable<ReviewScalarWhereInput>
    NOT?: Enumerable<ReviewScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    hostId?: IntFilter | number
    postDate?: StringFilter | string
    rating?: IntFilter | number
    text?: StringNullableFilter | string | null
  }

  export type hostAddressCreateWithoutHostInput = {
    street: string
    number: string
    cep: string
    district: string
    city: string
    state: string
  }

  export type hostAddressUncheckedCreateWithoutHostInput = {
    id?: number
    street: string
    number: string
    cep: string
    district: string
    city: string
    state: string
  }

  export type hostAddressCreateOrConnectWithoutHostInput = {
    where: hostAddressWhereUniqueInput
    create: XOR<hostAddressCreateWithoutHostInput, hostAddressUncheckedCreateWithoutHostInput>
  }

  export type hostAddressCreateManyHostInputEnvelope = {
    data: Enumerable<hostAddressCreateManyHostInput>
    skipDuplicates?: boolean
  }

  export type hostContactCreateWithoutHostInput = {
    insta?: string | null
    face?: string | null
    mobile?: string | null
    phone: string
    email: string
  }

  export type hostContactUncheckedCreateWithoutHostInput = {
    insta?: string | null
    face?: string | null
    mobile?: string | null
    phone: string
    email: string
  }

  export type hostContactCreateOrConnectWithoutHostInput = {
    where: hostContactWhereUniqueInput
    create: XOR<hostContactCreateWithoutHostInput, hostContactUncheckedCreateWithoutHostInput>
  }

  export type hostContactCreateManyHostInputEnvelope = {
    data: Enumerable<hostContactCreateManyHostInput>
    skipDuplicates?: boolean
  }

  export type RoleCreateWithoutHostsInput = {
    name: string
    users?: UserCreateNestedManyWithoutRolesInput
  }

  export type RoleUncheckedCreateWithoutHostsInput = {
    name: string
    users?: UserUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RoleCreateOrConnectWithoutHostsInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutHostsInput, RoleUncheckedCreateWithoutHostsInput>
  }

  export type ReviewCreateWithoutHostInput = {
    id?: number
    user: UserCreateNestedOneWithoutReviewsInput
    postDate: string
    rating: number
    text?: string | null
  }

  export type ReviewUncheckedCreateWithoutHostInput = {
    id?: number
    userId: number
    postDate: string
    rating: number
    text?: string | null
  }

  export type ReviewCreateOrConnectWithoutHostInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutHostInput, ReviewUncheckedCreateWithoutHostInput>
  }

  export type ReviewCreateManyHostInputEnvelope = {
    data: Enumerable<ReviewCreateManyHostInput>
    skipDuplicates?: boolean
  }

  export type hostAddressUpsertWithWhereUniqueWithoutHostInput = {
    where: hostAddressWhereUniqueInput
    update: XOR<hostAddressUpdateWithoutHostInput, hostAddressUncheckedUpdateWithoutHostInput>
    create: XOR<hostAddressCreateWithoutHostInput, hostAddressUncheckedCreateWithoutHostInput>
  }

  export type hostAddressUpdateWithWhereUniqueWithoutHostInput = {
    where: hostAddressWhereUniqueInput
    data: XOR<hostAddressUpdateWithoutHostInput, hostAddressUncheckedUpdateWithoutHostInput>
  }

  export type hostAddressUpdateManyWithWhereWithoutHostInput = {
    where: hostAddressScalarWhereInput
    data: XOR<hostAddressUpdateManyMutationInput, hostAddressUncheckedUpdateManyWithoutAddressInput>
  }

  export type hostAddressScalarWhereInput = {
    AND?: Enumerable<hostAddressScalarWhereInput>
    OR?: Enumerable<hostAddressScalarWhereInput>
    NOT?: Enumerable<hostAddressScalarWhereInput>
    id?: IntFilter | number
    street?: StringFilter | string
    number?: StringFilter | string
    cep?: StringFilter | string
    district?: StringFilter | string
    city?: StringFilter | string
    state?: StringFilter | string
    hostId?: IntNullableFilter | number | null
  }

  export type hostContactUpsertWithWhereUniqueWithoutHostInput = {
    where: hostContactWhereUniqueInput
    update: XOR<hostContactUpdateWithoutHostInput, hostContactUncheckedUpdateWithoutHostInput>
    create: XOR<hostContactCreateWithoutHostInput, hostContactUncheckedCreateWithoutHostInput>
  }

  export type hostContactUpdateWithWhereUniqueWithoutHostInput = {
    where: hostContactWhereUniqueInput
    data: XOR<hostContactUpdateWithoutHostInput, hostContactUncheckedUpdateWithoutHostInput>
  }

  export type hostContactUpdateManyWithWhereWithoutHostInput = {
    where: hostContactScalarWhereInput
    data: XOR<hostContactUpdateManyMutationInput, hostContactUncheckedUpdateManyWithoutContactInput>
  }

  export type hostContactScalarWhereInput = {
    AND?: Enumerable<hostContactScalarWhereInput>
    OR?: Enumerable<hostContactScalarWhereInput>
    NOT?: Enumerable<hostContactScalarWhereInput>
    id?: IntFilter | number
    insta?: StringNullableFilter | string | null
    face?: StringNullableFilter | string | null
    mobile?: StringNullableFilter | string | null
    phone?: StringFilter | string
    email?: StringFilter | string
  }

  export type RoleUpsertWithWhereUniqueWithoutHostsInput = {
    where: RoleWhereUniqueInput
    update: XOR<RoleUpdateWithoutHostsInput, RoleUncheckedUpdateWithoutHostsInput>
    create: XOR<RoleCreateWithoutHostsInput, RoleUncheckedCreateWithoutHostsInput>
  }

  export type RoleUpdateWithWhereUniqueWithoutHostsInput = {
    where: RoleWhereUniqueInput
    data: XOR<RoleUpdateWithoutHostsInput, RoleUncheckedUpdateWithoutHostsInput>
  }

  export type RoleUpdateManyWithWhereWithoutHostsInput = {
    where: RoleScalarWhereInput
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyWithoutRolesInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutHostInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutHostInput, ReviewUncheckedUpdateWithoutHostInput>
    create: XOR<ReviewCreateWithoutHostInput, ReviewUncheckedCreateWithoutHostInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutHostInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutHostInput, ReviewUncheckedUpdateWithoutHostInput>
  }

  export type ReviewUpdateManyWithWhereWithoutHostInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutReviewsInput>
  }

  export type UserCreateWithoutPersonalDataInput = {
    username: string
    password: string
    roles?: RoleCreateNestedManyWithoutUsersInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPersonalDataInput = {
    id?: number
    username: string
    password: string
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPersonalDataInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPersonalDataInput, UserUncheckedCreateWithoutPersonalDataInput>
  }

  export type UserUpsertWithoutPersonalDataInput = {
    update: XOR<UserUpdateWithoutPersonalDataInput, UserUncheckedUpdateWithoutPersonalDataInput>
    create: XOR<UserCreateWithoutPersonalDataInput, UserUncheckedCreateWithoutPersonalDataInput>
  }

  export type UserUpdateWithoutPersonalDataInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roles?: RoleUpdateManyWithoutUsersNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPersonalDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutRolesInput = {
    username: string
    password: string
    personalData?: userPersonalDataCreateNestedOneWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRolesInput = {
    id?: number
    username: string
    password: string
    personalData?: userPersonalDataUncheckedCreateNestedOneWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type HostCreateWithoutRolesInput = {
    hostName: string
    password: string
    address?: hostAddressCreateNestedManyWithoutHostInput
    contact?: hostContactCreateNestedManyWithoutHostInput
    reviews?: ReviewCreateNestedManyWithoutHostInput
  }

  export type HostUncheckedCreateWithoutRolesInput = {
    id?: number
    hostName: string
    password: string
    address?: hostAddressUncheckedCreateNestedManyWithoutHostInput
    contact?: hostContactUncheckedCreateNestedManyWithoutHostInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutHostInput
  }

  export type HostCreateOrConnectWithoutRolesInput = {
    where: HostWhereUniqueInput
    create: XOR<HostCreateWithoutRolesInput, HostUncheckedCreateWithoutRolesInput>
  }

  export type UserUpsertWithWhereUniqueWithoutRolesInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRolesInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
  }

  export type UserUpdateManyWithWhereWithoutRolesInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
  }

  export type HostUpsertWithWhereUniqueWithoutRolesInput = {
    where: HostWhereUniqueInput
    update: XOR<HostUpdateWithoutRolesInput, HostUncheckedUpdateWithoutRolesInput>
    create: XOR<HostCreateWithoutRolesInput, HostUncheckedCreateWithoutRolesInput>
  }

  export type HostUpdateWithWhereUniqueWithoutRolesInput = {
    where: HostWhereUniqueInput
    data: XOR<HostUpdateWithoutRolesInput, HostUncheckedUpdateWithoutRolesInput>
  }

  export type HostUpdateManyWithWhereWithoutRolesInput = {
    where: HostScalarWhereInput
    data: XOR<HostUpdateManyMutationInput, HostUncheckedUpdateManyWithoutHostsInput>
  }

  export type HostScalarWhereInput = {
    AND?: Enumerable<HostScalarWhereInput>
    OR?: Enumerable<HostScalarWhereInput>
    NOT?: Enumerable<HostScalarWhereInput>
    id?: IntFilter | number
    hostName?: StringFilter | string
    password?: StringFilter | string
  }

  export type HostCreateWithoutAddressInput = {
    hostName: string
    password: string
    contact?: hostContactCreateNestedManyWithoutHostInput
    roles?: RoleCreateNestedManyWithoutHostsInput
    reviews?: ReviewCreateNestedManyWithoutHostInput
  }

  export type HostUncheckedCreateWithoutAddressInput = {
    id?: number
    hostName: string
    password: string
    contact?: hostContactUncheckedCreateNestedManyWithoutHostInput
    roles?: RoleUncheckedCreateNestedManyWithoutHostsInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutHostInput
  }

  export type HostCreateOrConnectWithoutAddressInput = {
    where: HostWhereUniqueInput
    create: XOR<HostCreateWithoutAddressInput, HostUncheckedCreateWithoutAddressInput>
  }

  export type HostUpsertWithoutAddressInput = {
    update: XOR<HostUpdateWithoutAddressInput, HostUncheckedUpdateWithoutAddressInput>
    create: XOR<HostCreateWithoutAddressInput, HostUncheckedCreateWithoutAddressInput>
  }

  export type HostUpdateWithoutAddressInput = {
    hostName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    contact?: hostContactUpdateManyWithoutHostNestedInput
    roles?: RoleUpdateManyWithoutHostsNestedInput
    reviews?: ReviewUpdateManyWithoutHostNestedInput
  }

  export type HostUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    contact?: hostContactUncheckedUpdateManyWithoutHostNestedInput
    roles?: RoleUncheckedUpdateManyWithoutHostsNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutHostNestedInput
  }

  export type HostCreateWithoutContactInput = {
    hostName: string
    password: string
    address?: hostAddressCreateNestedManyWithoutHostInput
    roles?: RoleCreateNestedManyWithoutHostsInput
    reviews?: ReviewCreateNestedManyWithoutHostInput
  }

  export type HostUncheckedCreateWithoutContactInput = {
    id?: number
    hostName: string
    password: string
    address?: hostAddressUncheckedCreateNestedManyWithoutHostInput
    roles?: RoleUncheckedCreateNestedManyWithoutHostsInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutHostInput
  }

  export type HostCreateOrConnectWithoutContactInput = {
    where: HostWhereUniqueInput
    create: XOR<HostCreateWithoutContactInput, HostUncheckedCreateWithoutContactInput>
  }

  export type HostUpsertWithoutContactInput = {
    update: XOR<HostUpdateWithoutContactInput, HostUncheckedUpdateWithoutContactInput>
    create: XOR<HostCreateWithoutContactInput, HostUncheckedCreateWithoutContactInput>
  }

  export type HostUpdateWithoutContactInput = {
    hostName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: hostAddressUpdateManyWithoutHostNestedInput
    roles?: RoleUpdateManyWithoutHostsNestedInput
    reviews?: ReviewUpdateManyWithoutHostNestedInput
  }

  export type HostUncheckedUpdateWithoutContactInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: hostAddressUncheckedUpdateManyWithoutHostNestedInput
    roles?: RoleUncheckedUpdateManyWithoutHostsNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutHostNestedInput
  }

  export type UserCreateWithoutReviewsInput = {
    username: string
    password: string
    personalData?: userPersonalDataCreateNestedOneWithoutUserInput
    roles?: RoleCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    id?: number
    username: string
    password: string
    personalData?: userPersonalDataUncheckedCreateNestedOneWithoutUserInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type HostCreateWithoutReviewsInput = {
    hostName: string
    password: string
    address?: hostAddressCreateNestedManyWithoutHostInput
    contact?: hostContactCreateNestedManyWithoutHostInput
    roles?: RoleCreateNestedManyWithoutHostsInput
  }

  export type HostUncheckedCreateWithoutReviewsInput = {
    id?: number
    hostName: string
    password: string
    address?: hostAddressUncheckedCreateNestedManyWithoutHostInput
    contact?: hostContactUncheckedCreateNestedManyWithoutHostInput
    roles?: RoleUncheckedCreateNestedManyWithoutHostsInput
  }

  export type HostCreateOrConnectWithoutReviewsInput = {
    where: HostWhereUniqueInput
    create: XOR<HostCreateWithoutReviewsInput, HostUncheckedCreateWithoutReviewsInput>
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    personalData?: userPersonalDataUpdateOneWithoutUserNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    personalData?: userPersonalDataUncheckedUpdateOneWithoutUserNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type HostUpsertWithoutReviewsInput = {
    update: XOR<HostUpdateWithoutReviewsInput, HostUncheckedUpdateWithoutReviewsInput>
    create: XOR<HostCreateWithoutReviewsInput, HostUncheckedCreateWithoutReviewsInput>
  }

  export type HostUpdateWithoutReviewsInput = {
    hostName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: hostAddressUpdateManyWithoutHostNestedInput
    contact?: hostContactUpdateManyWithoutHostNestedInput
    roles?: RoleUpdateManyWithoutHostsNestedInput
  }

  export type HostUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: hostAddressUncheckedUpdateManyWithoutHostNestedInput
    contact?: hostContactUncheckedUpdateManyWithoutHostNestedInput
    roles?: RoleUncheckedUpdateManyWithoutHostsNestedInput
  }

  export type ReviewCreateManyUserInput = {
    id?: number
    hostId: number
    postDate: string
    rating: number
    text?: string | null
  }

  export type RoleUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    hosts?: HostUpdateManyWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    hosts?: HostUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateManyWithoutRolesInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    host?: HostUpdateOneRequiredWithoutReviewsNestedInput
    postDate?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    postDate?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUncheckedUpdateManyWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostId?: IntFieldUpdateOperationsInput | number
    postDate?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type hostAddressCreateManyHostInput = {
    id?: number
    street: string
    number: string
    cep: string
    district: string
    city: string
    state: string
  }

  export type hostContactCreateManyHostInput = {
    insta?: string | null
    face?: string | null
    mobile?: string | null
    phone: string
    email: string
  }

  export type ReviewCreateManyHostInput = {
    id?: number
    userId: number
    postDate: string
    rating: number
    text?: string | null
  }

  export type hostAddressUpdateWithoutHostInput = {
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type hostAddressUncheckedUpdateWithoutHostInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type hostAddressUncheckedUpdateManyWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type hostContactUpdateWithoutHostInput = {
    insta?: NullableStringFieldUpdateOperationsInput | string | null
    face?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type hostContactUncheckedUpdateWithoutHostInput = {
    insta?: NullableStringFieldUpdateOperationsInput | string | null
    face?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type hostContactUncheckedUpdateManyWithoutContactInput = {
    insta?: NullableStringFieldUpdateOperationsInput | string | null
    face?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUpdateWithoutHostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateWithoutHostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type ReviewUpdateWithoutHostInput = {
    id?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    postDate?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUncheckedUpdateWithoutHostInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    postDate?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutRolesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    personalData?: userPersonalDataUpdateOneWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    personalData?: userPersonalDataUncheckedUpdateOneWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type HostUpdateWithoutRolesInput = {
    hostName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: hostAddressUpdateManyWithoutHostNestedInput
    contact?: hostContactUpdateManyWithoutHostNestedInput
    reviews?: ReviewUpdateManyWithoutHostNestedInput
  }

  export type HostUncheckedUpdateWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: hostAddressUncheckedUpdateManyWithoutHostNestedInput
    contact?: hostContactUncheckedUpdateManyWithoutHostNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutHostNestedInput
  }

  export type HostUncheckedUpdateManyWithoutHostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}