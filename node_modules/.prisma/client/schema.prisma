// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int               @id @default(autoincrement())
  username     String            @unique
  password     String
  personalData userPersonalData?
  roles        Role[]
  reviews      Review[]
}

model Host {
  id       Int           @id @default(autoincrement())
  hostName String
  password String
  address  hostAddress[]
  contact  hostContact[]
  roles    Role[]
  reviews  Review[]
  events   Event[]
  agenda   HostAgenda[]
}

model userPersonalData {
  id          Int     @id @default(autoincrement())
  cellNumber  String?
  firstName   String
  lastName    String
  dateOfBirth String?
  email       String  @unique
  user        User?   @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId      Int?    @unique
}

model Role {
  name  String @id
  users User[]
  hosts Host[]
}

model hostAddress {
  id       Int    @id @default(autoincrement())
  street   String
  number   String
  cep      String
  district String
  city     String
  state    String
  host     Host?  @relation(fields: [hostId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  hostId   Int?
}

model hostContact {
  id     Int     @id @default(autoincrement())
  insta  String? @unique
  face   String? @unique
  mobile String? @unique
  phone  String  @unique
  email  String  @unique
  host   Host?   @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Review {
  id       Int     @default(autoincrement())
  userId   Int
  user     User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  hostId   Int
  host     Host    @relation(fields: [hostId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postDate String
  rating   Int
  text     String?

  @@id([id, userId, hostId])
}

model Event {
  id        Int        @default(autoincrement())
  hostId    Int
  host      Host       @relation(fields: [hostId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  startDate DateTime
  endDate   DateTime
  price     Float
  brief     String
  state     EventState @relation(fields: [stateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stateId   Int

  @@id([id, hostId])
}

model EventState {
  id     Int     @id
  status String
  Event  Event[]
}

model WeekDay {
  id     Int          @id
  day    String
  Agenda HostAgenda[]
}

model HostAgenda {
  id      Int     @default(autoincrement())
  weekday WeekDay @relation(fields: [dayId], references: [id])
  dayId   Int
  open    String
  host    Host?   @relation(fields: [hostId], references: [id])
  hostId  Int

  @@id([id, dayId, hostId])
}
