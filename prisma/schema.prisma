// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int              @id @default(autoincrement())
  username     String           @unique
  password     String
  personalData personalData?
  roles        Role[]
  reviews      ReviewUserHost[]
}

model personalData {
  id          Int     @id @default(autoincrement())
  cellNumber  String?
  firstName   String
  lastName    String
  dateOfBirth String?
  email       String  @unique
  user        User?   @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId      Int?    @unique
}

model Role {
  name  String @id
  users User[]
}

model Host {
  id       Int              @id @default(autoincrement())
  hostName String
  password String
  rating    Float
  timesRated Int
  address Address[]
  contact Contact[]
  reviews  ReviewUserHost[]
}


model Address {
  id       Int    @id @default(autoincrement())
  street   String
  number   String
  cep      String
  district String
  city     String
  state    String
  host     Host?  @relation(fields: [hostId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  hostId   Int?
}

model Contact {
  id     Int     @id @default(autoincrement())
  insta  String  @unique
  face   String  @unique
  mobile String  @unique
  tel    Phone[]
  email  String  @unique
  host   Host?   @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Phone {
  id        Int     @id @default(autoincrement())
  phone     String
  contact   Contact @relation(fields: [contactId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  contactId Int
}

model ReviewUserHost {
  userId   Int
  user     User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  hostId   Int
  host     Host?   @relation(fields: [hostId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  reviewId Int
  review   Review? @relation(fields: [reviewId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([userId, hostId, reviewId])
}

model Review {
  id         Int              @id @default(autoincrement())
  postDate   String
  text       String
  connection ReviewUserHost[]
}
